#!/usr/bin/env python3
"""
–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –¥–ª—è JSON —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö.
"""

import json
import os
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime


class UserStateValidator:
    """–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JSON —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    
    def __init__(self, user_states_dir: str = "user_states"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞.
        
        Args:
            user_states_dir: –ü–∞–ø–∫–∞ –∑—ñ —Å—Ç–∞–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        """
        self.user_states_dir = Path(user_states_dir)
        self.errors: List[str] = []
        self.warnings: List[str] = []
    
    def validate_user_state_structure(self, user_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        
        Args:
            user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            
        Returns:
            True —è–∫—â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª—ñ–¥–Ω–∞, False —ñ–Ω–∞–∫—à–µ
        """
        required_fields = ['telegram_id', 'last_updated', 'state']
        
        for field in required_fields:
            if field not in user_data:
                self.errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤
        if not isinstance(user_data['telegram_id'], int):
            self.errors.append("telegram_id –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ integer")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
        try:
            datetime.fromisoformat(user_data['last_updated'])
        except ValueError:
            self.errors.append(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: {user_data['last_updated']}")
            return False
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—é
        if 'profile' in user_data['state']:
            profile = user_data['state']['profile']
            profile_required = ['full_name', 'division', 'department', 'mobile_number', 'telegram_id']
            
            for field in profile_required:
                if field not in profile:
                    self.warnings.append(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ –ø—Ä–æ—Ñ—ñ–ª—é: {field}")
        
        return True
    
    def validate_file(self, file_path: Path) -> Optional[Dict[str, Any]]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É.
        
        Args:
            file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
            
        Returns:
            –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ —Ñ–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π, None —ñ–Ω–∞–∫—à–µ
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                user_data = json.load(f)
            
            if self.validate_user_state_structure(user_data):
                return user_data
            
        except json.JSONDecodeError as e:
            self.errors.append(f"–ü–æ–º–∏–ª–∫–∞ JSON —É —Ñ–∞–π–ª—ñ {file_path}: {e}")
        except FileNotFoundError:
            self.errors.append(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        except Exception as e:
            self.errors.append(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —É —Ñ–∞–π–ª—ñ {file_path}: {e}")
        
        return None
    
    def validate_all_files(self) -> Dict[str, Any]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ user_states.
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        """
        if not self.user_states_dir.exists():
            return {
                'success': False,
                'error': f"–ü–∞–ø–∫–∞ {self.user_states_dir} –Ω–µ —ñ—Å–Ω—É—î"
            }
        
        json_files = list(self.user_states_dir.glob("*.json"))
        valid_files = []
        invalid_files = []
        
        for file_path in json_files:
            user_data = self.validate_file(file_path)
            if user_data:
                valid_files.append({
                    'file': str(file_path),
                    'telegram_id': user_data['telegram_id'],
                    'last_updated': user_data['last_updated']
                })
            else:
                invalid_files.append(str(file_path))
        
        return {
            'success': len(self.errors) == 0,
            'total_files': len(json_files),
            'valid_files': len(valid_files),
            'invalid_files': len(invalid_files),
            'files_details': valid_files,
            'errors': self.errors,
            'warnings': self.warnings
        }
    
    def get_user_statistics(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        stats = {
            'total_users': 0,
            'active_users': 0,
            'divisions': set(),
            'departments': set(),
            'sync_enabled': 0,
            'last_activity': None
        }
        
        json_files = list(self.user_states_dir.glob("*.json"))
        
        for file_path in json_files:
            user_data = self.validate_file(file_path)
            if user_data:
                stats['total_users'] += 1
                
                state = user_data.get('state', {})
                
                # –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if state.get('status') == 'active':
                    stats['active_users'] += 1
                
                # –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                profile = state.get('profile', {})
                if profile.get('division'):
                    stats['divisions'].add(profile['division'])
                if profile.get('department'):
                    stats['departments'].add(profile['department'])
                
                # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
                if state.get('sync_with_google'):
                    stats['sync_enabled'] += 1
                
                # –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                last_updated = user_data.get('last_updated')
                if last_updated:
                    if not stats['last_activity'] or last_updated > stats['last_activity']:
                        stats['last_activity'] = last_updated
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ sets —É lists –¥–ª—è JSON serialization
        stats['divisions'] = list(stats['divisions'])
        stats['departments'] = list(stats['departments'])
        
        return stats


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó."""
    validator = UserStateValidator()
    
    print("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON —Ñ–∞–π–ª—ñ–≤ —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    results = validator.validate_all_files()
    
    if results['success']:
        print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ –≤–∞–ª—ñ–¥–Ω—ñ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {results['valid_files']}/{results['total_files']} —Ñ–∞–π–ª—ñ–≤")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        stats = validator.get_user_statistics()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        print(f"   –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}")
        print(f"   –í—ñ–¥–¥—ñ–ª–∏: {', '.join(stats['divisions'])}")
        print(f"   –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏: {', '.join(stats['departments'])}")
        print(f"   –ó —É–≤—ñ–º–∫–Ω–µ–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é: {stats['sync_enabled']}")
        if stats['last_activity']:
            print(f"   –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {stats['last_activity']}")
        
    else:
        print("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏:")
        for error in results['errors']:
            print(f"   ‚Ä¢ {error}")
    
    if results['warnings']:
        print("\n‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:")
        for warning in results['warnings']:
            print(f"   ‚Ä¢ {warning}")


if __name__ == "__main__":
    main()
