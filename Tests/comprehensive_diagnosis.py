#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ –≤ Telegram Bot
–¶–µ–π —Å–∫—Ä–∏–ø—Ç —ñ–º—ñ—Ç—É—î –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏
"""

import sys
import os
import asyncio
import json
import logging
from typing import Dict, Any, Optional, List

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏
sys.path.insert(0, '/home/Bot1')
sys.path.insert(0, '/home/Bot1/src')

async def test_telegram_token():
    """–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–æ—Å—Ç—É–ø –¥–æ Telegram API"""
    print("üß™ –¢–ï–°–¢ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Telegram API")
    
    try:
        from config.config import TELEGRAM_TOKEN
        
        if not TELEGRAM_TOKEN:
            print("‚ùå TELEGRAM_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π!")
            return False
            
        print(f"‚úÖ TELEGRAM_TOKEN: {TELEGRAM_TOKEN[:10]}...{TELEGRAM_TOKEN[-10:]}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        import httpx
        async with httpx.AsyncClient() as client:
            response = await client.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe")
            result = response.json()
            
            if result.get('ok'):
                bot_info = result.get('result', {})
                print(f"‚úÖ Bot Info: {bot_info.get('username')} ({bot_info.get('first_name')})")
                return True
            else:
                print(f"‚ùå Telegram API Error: {result}")
                return False
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

async def test_file_download_simulation():
    """–¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Jira"""
    print("\\nüß™ –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É")
    
    try:
        # –Ü–º—ñ—Ç—É—î–º–æ —Ñ–∞–π–ª Excel
        excel_content = b"PK\\x03\\x04\\x14\\x00\\x00\\x00\\x08\\x00"  # –ü–æ—á–∞—Ç–æ–∫ Excel —Ñ–∞–π–ª—É
        filename = "test.xlsx"
        mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        
        print(f"üìÅ –§–∞–π–ª: {filename}")
        print(f"üìã MIME: {mime_type}")
        print(f"üìä –†–æ–∑–º—ñ—Ä: {len(excel_content)} bytes")
        
        # –Ü–º—ñ—Ç—É—î–º–æ —Ñ–æ—Ç–æ
        jpg_content = b"\\xff\\xd8\\xff\\xe0"  # –ü–æ—á–∞—Ç–æ–∫ JPEG —Ñ–∞–π–ª—É
        photo_filename = "test.jpg"
        photo_mime = "image/jpeg"
        
        print(f"üì∏ –§–æ—Ç–æ: {photo_filename}")
        print(f"üìã MIME: {photo_mime}")
        print(f"üìä –†–æ–∑–º—ñ—Ä: {len(jpg_content)} bytes")
        
        return [
            (filename, excel_content, mime_type),
            (photo_filename, jpg_content, photo_mime)
        ]
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return []

async def test_telegram_api_methods():
    """–¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫–∏–π –º–µ—Ç–æ–¥ API –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ"""
    print("\\nüß™ –¢–ï–°–¢ 3: –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É Telegram API")
    
    test_files = [
        ("test.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 1024),
        ("test.jpg", "image/jpeg", 1024),
        ("test.txt", "text/plain", 1024),
        ("test.mp4", "video/mp4", 1024),
        ("test.mp3", "audio/mpeg", 1024),
    ]
    
    for filename, mime_type, file_size in test_files:
        # –õ–æ–≥—ñ–∫–∞ –∑ send_telegram_message
        method = "sendDocument"  # Default
        file_param = "document"
        
        if mime_type.startswith('image/'):
            if file_size <= 10 * 1024 * 1024:  # 10MB
                method = "sendPhoto"
                file_param = "photo"
        elif mime_type.startswith('video/'):
            if file_size <= 50 * 1024 * 1024:  # 50MB
                method = "sendVideo"
                file_param = "video"
        elif mime_type.startswith('audio/'):
            if file_size <= 50 * 1024 * 1024:  # 50MB
                method = "sendAudio"
                file_param = "audio"
        
        print(f"üìÅ {filename} ‚Üí {method} (param: {file_param})")

async def test_send_telegram_message_function():
    """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é send_telegram_message"""
    print("\\nüß™ –¢–ï–°–¢ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó send_telegram_message")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
        from jira_webhooks2 import send_telegram_message
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (–Ω–µ–≤–µ–ª–∏–∫–∏–π —Ñ–∞–π–ª)
        test_content = b"Test file content for debugging"
        test_filename = "debug_test.txt"
        test_mime = "text/plain"
        
        # –¢–µ—Å—Ç–æ–≤–∏–π chat_id (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É)
        test_chat_id = "123456789"  # –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π chat_id –¥–ª—è —Ç–µ—Å—Ç—É
        test_message = "üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º"
        
        print(f"üì§ –¢–µ—Å—Ç—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª—É: {test_filename}")
        print(f"üí¨ Chat ID: {test_chat_id}")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
        result = await send_telegram_message(
            chat_id=test_chat_id,
            text=test_message,
            file_data=(test_filename, test_content, test_mime)
        )
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ send_telegram_message: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_webhook_payload_processing():
    """–¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook payload"""
    print("\\nüß™ –¢–ï–°–¢ 5: –°–∏–º—É–ª—è—Ü—ñ—è webhook –∑ —Ñ–∞–π–ª–∞–º–∏")
    
    # –Ü–º—ñ—Ç—É—î–º–æ webhook payload –∑ —Ñ–∞–π–ª–∞–º–∏
    mock_webhook = {
        "webhookEvent": "comment_created",
        "comment": {
            "id": "12345",
            "body": "Test comment with files\\n\\n!289–≥—Ä–Ω.JPG|data-attachment-id=123456!\\n!–ß–µ—Ä–∫–∞—Å–∏ –µ-–¥—Ä–∞–π–≤.xlsx|data-attachment-id=789012!",
            "author": {
                "displayName": "Test User",
                "emailAddress": "test@example.com"
            }
        },
        "issue": {
            "key": "TEST-123",
            "fields": {
                "summary": "Test Issue",
                "attachment": [
                    {
                        "id": "123456",
                        "filename": "289–≥—Ä–Ω.JPG",
                        "size": 95432,
                        "mimeType": "image/jpeg",
                        "content": "https://euromix.atlassian.net/secure/attachment/123456/289–≥—Ä–Ω.JPG"
                    },
                    {
                        "id": "789012",
                        "filename": "–ß–µ—Ä–∫–∞—Å–∏ –µ-–¥—Ä–∞–π–≤.xlsx",
                        "size": 15678,
                        "mimeType": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        "content": "https://euromix.atlassian.net/secure/attachment/789012/–ß–µ—Ä–∫–∞—Å–∏%20–µ-–¥—Ä–∞–π–≤.xlsx"
                    }
                ]
            }
        }
    }
    
    print("üì• Webhook payload —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    print(f"üìé –ó–Ω–∞–π–¥–µ–Ω–æ {len(mock_webhook['issue']['fields']['attachment'])} –≤–∫–ª–∞–¥–µ–Ω—å:")
    
    for att in mock_webhook['issue']['fields']['attachment']:
        print(f"  - {att['filename']} ({att['mimeType']}) - {att['size']} bytes")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
    try:
        # –°–∏–º—É–ª—è—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ –∑ handle_comment_created
        attachments = []
        
        # 1. –ü–æ—à—É–∫ –≤ issue.fields.attachment (–∫–ª—é—á–æ–≤–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è)
        if 'issue' in mock_webhook and 'fields' in mock_webhook['issue']:
            if 'attachment' in mock_webhook['issue']['fields']:
                issue_attachments = mock_webhook['issue']['fields']['attachment']
                if issue_attachments:
                    attachments.extend(issue_attachments)
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(issue_attachments)} –≤–∫–ª–∞–¥–µ–Ω—å –Ω–∞ —Ä—ñ–≤–Ω—ñ issue")
        
        # 2. –ü–æ—à—É–∫ embedded —Ñ–∞–π–ª—ñ–≤ –≤ —Ç–µ–∫—Å—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        import re
        comment_body = mock_webhook['comment']['body']
        embedded_pattern = r'!([^|]+)\\|data-attachment-id=([^!]+)!'
        embedded_matches = re.findall(embedded_pattern, comment_body)
        
        print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(embedded_matches)} embedded –ø–æ—Å–∏–ª–∞–Ω—å:")
        for filename, att_id in embedded_matches:
            print(f"  - {filename} (ID: {att_id})")
        
        print(f"üéØ –ó–ê–ì–ê–õ–¨–ù–ê –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –í–ö–õ–ê–î–ï–ù–¨: {len(attachments)}")
        return len(attachments) > 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {e}")
        return False

async def test_mime_type_detection():
    """–¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è MIME —Ç–∏–ø—ñ–≤"""
    print("\\nüß™ –¢–ï–°–¢ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MIME —Ç–∏–ø—ñ–≤")
    
    try:
        from attachment_processor import _infer_mime_type
        
        test_files = [
            "289–≥—Ä–Ω.JPG",
            "–ß–µ—Ä–∫–∞—Å–∏ –µ-–¥—Ä–∞–π–≤.xlsx", 
            "document.pdf",
            "archive.zip",
            "text.txt"
        ]
        
        for filename in test_files:
            mime_type = _infer_mime_type(filename)
            print(f"üìÅ {filename} ‚Üí {mime_type}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

async def run_comprehensive_diagnosis():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–á –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò –§–ê–ô–õ–Ü–í TELEGRAM BOT")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Telegram API
    results['telegram_api'] = await test_telegram_token()
    
    # –¢–µ—Å—Ç 2: –§–∞–π–ª–∏
    test_files = await test_file_download_simulation()
    results['file_simulation'] = len(test_files) > 0
    
    # –¢–µ—Å—Ç 3: API –º–µ—Ç–æ–¥–∏
    await test_telegram_api_methods()
    results['api_methods'] = True
    
    # –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    results['send_function'] = await test_send_telegram_message_function()
    
    # –¢–µ—Å—Ç 5: Webhook –æ–±—Ä–æ–±–∫–∞
    results['webhook_processing'] = await test_webhook_payload_processing()
    
    # –¢–µ—Å—Ç 6: MIME —Ç–∏–ø–∏
    results['mime_types'] = await test_mime_type_detection()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    all_passed = True
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–®–û–í" if result else "‚ùå –ù–ï –ü–†–û–ô–®–û–í"
        print(f"  {test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\\nüéØ –í–ò–°–ù–û–í–û–ö:")
    if all_passed:
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–∏—Ö webhooks –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.")
    else:
        print("‚ùå –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–µ—É—Å–ø—ñ—à–Ω—ñ —Ç–µ—Å—Ç–∏.")
    
    return results

if __name__ == "__main__":
    asyncio.run(run_comprehensive_diagnosis())
