#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö webhook –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ issue_key
"""

import json
import re
from typing import Dict, Any, Optional

# –†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ª–æ–≥—ñ–≤
real_attachment_created_log = """
14:08:27,258 - üîî ATTACHMENT_CREATED EVENT RECEIVED
14:08:27,258 - üìé Processing attachment_created: New Text Document (7bdd763d-760d-4197-8b15-1364ca6a95aa).txt (ID: 135644)
14:08:34,936 - ‚ùå Cannot determine issue key for attachment 135644. Skipping cache.
"""

real_comment_created_log = """
14:08:27,733 - Processing new comment for issue SD-42699
14:08:28,196 - üì¶ Found 0 cached attachments (should be 2!)
"""

def analyze_webhook_structure():
    """–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ webhook –ø–æ–¥—ñ–π"""
    print("üîç –ê–ù–ê–õ–Ü–ó WEBHOOK –°–¢–†–£–ö–¢–£–†–ò")
    print("=" * 60)
    
    # –¢–∏–ø–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ attachment_created webhook –±–µ–∑ issue
    typical_attachment_webhook = {
        "webhookEvent": "attachment_created",
        "timestamp": 1720704507258,
        "user": {
            "accountId": "5f27b6facdb7b4001be9f12f",
            "displayName": "User Name"
        },
        "attachment": {
            "id": "135644",
            "filename": "New Text Document (7bdd763d-760d-4197-8b15-1364ca6a95aa).txt",
            "mimeType": "text/plain",
            "size": 123,
            "self": "https://euromix.atlassian.net/rest/api/3/attachment/135644",
            "content": "https://euromix.atlassian.net/rest/api/3/attachment/135644/content"
        }
        # –ü–†–û–ë–õ–ï–ú–ê: –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ "issue"!
    }
    
    # –¢–∏–ø–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ comment_created –∑ issue
    typical_comment_webhook = {
        "webhookEvent": "comment_created", 
        "timestamp": 1720704507733,
        "issue": {
            "key": "SD-42699",  # ‚Üê –¢—É—Ç —î issue_key!
            "fields": {
                "attachment": []  # –ê–ª–µ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ
            }
        },
        "comment": {
            "author": {"displayName": "User"},
            "body": "Comment with embedded: !0142.JPG|data-attachment-id=135645!"
        }
    }
    
    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: attachment_created –ø–æ–¥—ñ—ó –ù–ï –ú–Ü–°–¢–Ø–¢–¨ issue –ø–æ–ª–µ")
    print("‚úÖ –†–Ü–®–ï–ù–ù–Ø: comment_created –ø–æ–¥—ñ—ó –ú–Ü–°–¢–Ø–¢–¨ issue –ø–æ–ª–µ")
    print()
    print("üìã –°–¢–†–ê–¢–ï–ì–Ü–á –û–¢–†–ò–ú–ê–ù–ù–Ø ISSUE_KEY:")
    print("1. üåê API –∑–∞–ø–∏—Ç: /rest/api/3/attachment/{id}")
    print("2. üîó URL parsing: –≤–∏—Ç—è–≥—Ç–∏ –∑ attachment.self –∞–±–æ content URL")
    print("3. üìù Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±–µ–∑ issue_key")
    
    return typical_attachment_webhook, typical_comment_webhook

def test_url_parsing():
    """–¢–µ—Å—Ç –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è issue_key –∑ URL"""
    print("\nüîß –¢–ï–°–¢ –í–ò–¢–Ø–ì–£–í–ê–ù–ù–Ø ISSUE_KEY –ó URL")
    print("-" * 50)
    
    test_urls = [
        "https://euromix.atlassian.net/rest/api/3/attachment/135644",
        "https://euromix.atlassian.net/rest/api/3/attachment/135644/content", 
        "https://euromix.atlassian.net/secure/attachment/135644/filename.txt",
        "https://euromix.atlassian.net/browse/SD-42699/attachment/135644"
    ]
    
    for url in test_urls:
        print(f"üîó URL: {url}")
        
        # –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥—Ç–∏ attachment ID
        attachment_id_match = re.search(r'/attachment/(\d+)', url)
        if attachment_id_match:
            att_id = attachment_id_match.group(1)
            print(f"   ‚úÖ Attachment ID: {att_id}")
        
        # –°–ø—Ä–æ–±–∞ –≤–∏—Ç—è–≥—Ç–∏ issue key (—è–∫—â–æ —î)
        issue_key_match = re.search(r'/browse/([A-Z]+-\d+)', url)
        if issue_key_match:
            issue_key = issue_key_match.group(1)
            print(f"   ‚úÖ Issue Key: {issue_key}")
        else:
            print(f"   ‚ùå Issue Key: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print()

def propose_solution():
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ä—ñ—à–µ–Ω–Ω—è"""
    print("üí° –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ï –†–Ü–®–ï–ù–ù–Ø")
    print("=" * 60)
    
    solution_steps = [
        "1. üïí –¢–ò–ú–ß–ê–°–û–í–ï –ö–ï–®–£–í–ê–ù–ù–Ø –ë–ï–ó ISSUE_KEY",
        "   - –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ attachment_created –ø–æ–¥—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∫–µ—à—ñ",
        "   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ attachment_id —è–∫ –∫–ª—é—á",
        "   - –ü—Ä–∏ comment_created —à—É–∫–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ attachments",
        "",
        "2. üîÑ –ü–û–ö–†–ê–©–ï–ù–ò–ô MATCHING –ê–õ–ì–û–†–ò–¢–ú", 
        "   - –ü–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ —á–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏ (¬±30 —Å–µ–∫—É–Ω–¥)",
        "   - –ó—ñ—Å—Ç–∞–≤–ª—è—Ç–∏ —ñ–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤",
        "   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ embedded attachments —è–∫ –ø—ñ–¥–∫–∞–∑–∫–∏",
        "",
        "3. üåê –ê–°–ò–ù–•–†–û–ù–ù–Ü API –ó–ê–ü–ò–¢–ò",
        "   - –†–æ–±–∏—Ç–∏ API –∑–∞–ø–∏—Ç–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ", 
        "   - –ù–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ webhook –æ–±—Ä–æ–±–∫—É",
        "   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–¥—ñ–π",
        "",
        "4. üìù FALLBACK –°–¢–†–ê–¢–ï–ì–Ü–á",
        "   - –Ø–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–∞—Å–æ–≤—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è",
        "   - –Ø–∫—â–æ –Ω–µ–≤–¥–∞–ª–æ—Å—è –∑—ñ—Å—Ç–∞–≤–∏—Ç–∏ - –ª–æ–≥—É–≤–∞—Ç–∏ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏",
        "   - –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"
    ]
    
    for step in solution_steps:
        print(step)

if __name__ == "__main__":
    analyze_webhook_structure()
    test_url_parsing() 
    propose_solution()
    
    print("\nüéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞ attachment_id")
    print("2. –î–æ–¥–∞—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º —Ç–∞ —ñ–º–µ–Ω–µ–º —Ñ–∞–π–ª—É")
    print("3. –ü–æ–∫—Ä–∞—â–∏—Ç–∏ API –∑–∞–ø–∏—Ç–∏ –∑ –∫—Ä–∞—â–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ webhook –ø–æ–¥—ñ—è–º–∏")
