# handlers.py

import os
import logging
from typing import Dict, Any, Optional

from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler
)

from src.google_sheets_service import (  
    find_user_by_phone,
    find_user_by_telegram_id, 
    update_user_telegram,
    add_new_user
)
from src.services import (
    create_jira_issue,
    find_open_issues,
    find_done_issues,
    add_comment_to_jira,
    JiraApiError,
    attach_file_to_jira,
    get_issue_status,
    get_issue_details,
    get_full_issue_info
)
from src.constants import (
    DIVISIONS, DEPARTMENTS, SERVICES,
    DIVISION_ID_MAPPINGS, DEPARTMENT_ID_MAPPINGS, SERVICE_ID_MAPPINGS,
    JIRA_FIELD_MAPPINGS, JIRA_FIELD_IDS
)
from src.field_mapping import FIELD_MAP
from src.keyboards import (
    main_menu_markup,
    contact_request_markup,
    failed_auth_markup,
    after_create_markup,
    service_selection_markup,
    confirm_issue_markup,
    my_issues_markup,
    issues_view_markup
)
from config.config import (
    JIRA_REPORTER_ACCOUNT_ID,
    JIRA_PROJECT_KEY,
    JIRA_ISSUE_TYPE
)

# –°—Ç–∞–Ω–∏ ConversationHandler
SERVICE, DESCRIPTION, CONFIRM, FULL_NAME, MOBILE_NUMBER, DIVISION, DEPARTMENT = range(7)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á 
active_task_is_done = False


def check_required_objects(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                          require_message: bool = True, 
                          require_callback: bool = False) -> bool:
    """
    Helper function to check if required Telegram objects are present.
    Returns True if all required objects are available, False otherwise.
    """
    if not update.effective_user:
        logger.error("Missing effective_user in update")
        return False
        
    if context.user_data is None:
        logger.error("Missing user_data in context")
        return False
        
    if require_message and not update.message:
        logger.error("Missing message in update")
        return False
        
    if require_callback and not update.callback_query:
        logger.error("Missing callback_query in update")
        return False
        
    return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ /start.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–∞ Telegram ID —Ç–∞ –∑–∞–ø–∏—Ç—É—î –∫–æ–Ω—Ç–∞–∫—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    """
    # Type guards for required objects
    if not check_required_objects(update, context, require_message=True):
        return
        
    user_id = str(update.effective_user.id)
    context.user_data["telegram_id"] = user_id
    tg_username = update.effective_user.username or ""
    
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ –±—É–¥—å-—è–∫–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π ConversationHandler –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É /start
    # —Ü–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∂–¥–∏ –ø–æ—Ç—Ä–∞–ø–ª—è—î –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
    
    # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ /start
    # (–Ω–µ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É —á–µ—Ä–µ–∑ restart_handler)
    if (update.message.text and update.message.text == "/start" and 
        not context.user_data.get("profile")):
        context.user_data.clear()
        context.user_data["telegram_id"] = user_id
    
    # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Google Sheets –∑–∞ Telegram ID
    logger.info(f"–®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID: {user_id}")
    res = find_user_by_telegram_id(user_id)
    
    if res:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ Telegram ID
        record, row = res
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ Telegram ID: {record.get('full_name')}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ telegram_username, —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è
        if tg_username and tg_username != record.get("telegram_username", ""):
            update_user_telegram(row, user_id, tg_username)
            record["telegram_username"] = tg_username
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
        context.user_data["profile"] = record
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_info = f"üëã *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!*\n\n"
        user_info += f"üë§ *–Ü–º'—è:* {record['full_name']}\n"
        user_info += f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {record.get('mobile_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        user_info += f"üìß *Email:* {record.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        user_info += f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {record.get('department', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        # user_info += f"üéØ *–ü–æ—Å–∞–¥–∞:* {record.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"

        # # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Jira (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)
        # if record.get('account_id'):
        #     user_info += f"‚úÖ *Jira:* –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ\n"
        # else:
        #     user_info += f"‚ùå *Jira:* –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ\n"
        
        user_info += f"\nüÜî *Telegram ID:* `{record['telegram_id']}`"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        keyboard = [
            [KeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
            [KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"), KeyboardButton("üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É")],
            [KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")]
        ]
        auth_menu_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            user_info,
            reply_markup=auth_menu_markup,
            parse_mode="Markdown"
        )
    else:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ Telegram ID, –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        await update.message.reply_text(
            "*–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.* _–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—ñ._",
            reply_markup=contact_request_markup,
            parse_mode="Markdown"
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data["new_user"] = {
            "telegram_id": user_id,
            "telegram_username": tg_username
        }


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    # Type guards for required objects
    if not update.message or not update.message.contact or not update.effective_user or not context.user_data:
        logger.error("Missing required objects in contact handler")
        return
        
    contact = update.message.contact
    phone = contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["mobile_number"] = phone
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
    
    # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Google Sheets
    res = find_user_by_phone(phone)
    if res:
        record, row = res
        # –û–Ω–æ–≤–ª—é—î–º–æ telegram_id —Ç–∞ username
        tg_id = str(update.effective_user.id)
        tg_username = update.effective_user.username or ""
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ - –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram ID –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—ó update_user_telegram
        update_user_telegram(row, tg_id, tg_username)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π ID
        record["telegram_id"] = tg_id.strip().replace("'", "")  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ ID
        record["telegram_username"] = tg_username
        record["mobile_number"] = phone  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        account_id = record.get("account_id")
        if account_id:  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ account_id –¥–ª—è Jira —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —î
            record["account_id"] = account_id
        context.user_data["profile"] = record
        
        await update.message.reply_text(
            f"‚úÖ *–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ, {record['full_name']}!*",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–±—É–≤–∞—î–º–æ –º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
        if context.user_data.get("full_name"):
            # –ú–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            markup = ReplyKeyboardMarkup(
                [[div] for div in DIVISIONS] + [["üîô –ù–∞–∑–∞–¥"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await update.message.reply_text(
                "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:*",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return DIVISION
    else:
        # –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ
        await update.message.reply_text(
            "‚ö†Ô∏è *–ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ.*\n"
            "_–í–∏–±–µ—Ä—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É, "
            "–∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä._",
            reply_markup=failed_auth_markup,
            parse_mode="Markdown"
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ MOBILE_NUMBER, —è–∫—â–æ –º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
        if context.user_data.get("full_name"):
            return MOBILE_NUMBER


async def my_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å' - –ø–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # Type guards for required objects
    if not check_required_objects(update, context, require_message=True):
        return
    
    profile = context.user_data.get("profile")
    if not profile or not profile.get("telegram_id"):
        await update.message.reply_text(
            "‚ùó *–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.*\n"
            "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
            reply_markup=contact_request_markup,
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:*\n\n"
    user_info += f"üë§ *–Ü–º'—è:* {profile['full_name']}\n"
    user_info += f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {profile.get('mobile_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    user_info += f"üìß *Email:* {profile.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    user_info += f"üè¢ *–í—ñ–¥–¥—ñ–ª:* {profile.get('department', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    # user_info += f"üéØ *–ü–æ—Å–∞–¥–∞:* {profile.get('position', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"

    # # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Jira
    # if profile.get('account_id'):
    #     user_info += f"‚úÖ *Jira:* –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ\n"
    # else:
    #     user_info += f"‚ùå *Jira:* –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ\n"
    
    user_info += f"\nüÜî *Telegram ID:* `{profile['telegram_id']}`"
    
    await update.message.reply_text(
        user_info,
        reply_markup=main_menu_markup,
        parse_mode="Markdown"
    )


async def re_auth_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'"""
    # Type guards for required objects
    if not check_required_objects(update, context, require_message=True):
        return
    
    # –û—á–∏—â–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    context.user_data.clear()
    user_id = str(update.effective_user.id)
    tg_username = update.effective_user.username or ""
    context.user_data["telegram_id"] = user_id
    
    await update.message.reply_text(
        "üîÑ *–ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è*\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=contact_request_markup,
        parse_mode="Markdown"
    )


async def restart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ /start' - –≤–∏–∫–æ–Ω—É—î —Ä–µ—Å—Ç–∞—Ä—Ç –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é"""
    # Type guards for required objects
    if not check_required_objects(update, context, require_message=True):
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
    saved_profile = context.user_data.get("profile")
    
    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    context.user_data.clear()
    user_id = str(update.effective_user.id)
    context.user_data["telegram_id"] = user_id
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    if saved_profile:
        context.user_data["profile"] = saved_profile
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é start –Ω–∞–ø—Ä—è–º—É –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏
    await start(update, context)


async def create_task_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É' –¥–ª—è –∑–∞–ø—É—Å–∫—É ConversationHandler"""
    logger.info(f"create_task_button_handler: –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç '{update.message.text}'")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ create_issue_start
    return await create_issue_start(update, context)


async def continue_without_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó'"""
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    tg_id = str(update.effective_user.id)
    tg_username = update.effective_user.username or ""
    mobile_number = context.user_data.get("mobile_number", "")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ new_user –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["profile"] = None
    context.user_data["new_user"] = {
        "telegram_id": tg_id,
        "telegram_username": tg_username,
        "mobile_number": mobile_number
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä–µ–±—É–≤–∞—î–º–æ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
    if context.user_data.get("full_name"):
        # –Ø–∫—â–æ —Ç–∞–∫, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        markup = ReplyKeyboardMarkup(
            [[div] for div in DIVISIONS] + [["üîô –ù–∞–∑–∞–¥"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
        return DIVISION
    else:
        # –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            "üë§ *–í–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.* _–ü—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ "
            "–≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∫–∞–∑–∞—Ç–∏ –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.\n"
            "–í–∞—à—ñ –¥–∞–Ω—ñ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å._",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )


async def my_issues(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    profile = context.user_data.get("profile")
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "–Ω–µ–º–∞—î"
    
    # –†–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logger.info(f"my_issues: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ID={user_id}, username=@{username}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    telegram_id = None
    
    # 1. –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
    if (profile and profile.get("telegram_id")):
        telegram_id = str(profile.get("telegram_id")).strip().replace("'", "")  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ ID
        logger.info(f"my_issues: –≤–∑—è—Ç–æ ID –∑ –ø—Ä–æ—Ñ—ñ–ª—é: {telegram_id}")
    # 2. –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    else:
        telegram_id = user_id.strip().replace("'", "")  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ ID
        logger.info(f"my_issues: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {telegram_id}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–¥–∞—á
    await update.message.reply_text(
        "_–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á..._",
        reply_markup=issues_view_markup,
        parse_mode="Markdown"
    )
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π telegram_id –¥–ª—è –ø–æ—à—É–∫—É
        issues = await find_open_issues(telegram_id)
        logger.info(f"my_issues: –∑–Ω–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á –¥–ª—è ID {telegram_id}")
        
        for issue in issues:
            logger.info(f"my_issues: –∑–∞–¥–∞—á–∞ {issue['key']} –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {issue['status']}")
    except Exception as e:
        logger.error(f"my_issues: –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∑–∞–¥–∞—á –¥–ª—è {telegram_id}: {str(e)}")
        issues = []
    if not issues:
        await update.message.reply_text(
            "*–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á.* _–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É'._",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    context.user_data["last_issues_list"] = issues
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –∑–∞–¥–∞—á—É —è–∫ –∞–∫—Ç–∏–≤–Ω—É
    if len(issues) > 0:
        context.user_data["active_task"] = issues[0]["key"]
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    text_list = ["*–í–∞—à—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞–¥–∞—á—ñ:*"]
    for idx, issue in enumerate(issues, 1):
        active_mark = "‚û°Ô∏è " if issue["key"] == context.user_data.get("active_task") else ""
        text_list.append(f"{active_mark}*`{issue['key']}`* ‚Äî _{issue['status']}_")
    
    text_list.append("\n_–©–æ–± –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç._")
    
    # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º Markdown
    await update.message.reply_text("\n".join(text_list), reply_markup=issues_view_markup, parse_mode="Markdown")
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É
    await show_active_task_details(update, context)


async def update_issues_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    profile = context.user_data.get("profile")
    tg_id = str(update.effective_user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    if profile and profile.get("telegram_id"):
        tg_id = str(profile.get("telegram_id"))
        logger.info(f"update_issues_status: –≤–∑—è—Ç–æ ID –∑ –ø—Ä–æ—Ñ—ñ–ª—é: {tg_id}")
    else:
        logger.info(f"update_issues_status: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {tg_id}")
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    await update.message.reply_text("üîÑ –û–Ω–æ–≤–ª—é—é —Å—Ç–∞—Ç—É—Å–∏ –∑–∞–¥–∞—á...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        active_task = context.user_data.get("active_task")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á
        open_issues = await find_open_issues(tg_id)
        done_issues = await find_done_issues(tg_id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        active_task_is_done = False
        
        # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–æ–Ω–∞ –Ω–µ —Å—Ç–∞–ª–∞ Done
        if active_task:
            active_task_is_done = any(issue["key"] == active_task for issue in done_issues)
            if active_task_is_done:
                # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–æ—ó –∑–∞–¥–∞—á—ñ
                done_issue = next((issue for issue in done_issues if issue["key"] == active_task), None)
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ—ó –∑–º—ñ–Ω–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
                await update.message.reply_text(
                    f"*–°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞:*\n‚û°Ô∏è *`{active_task}`* ‚Äî *–í–∏–∫–æ–Ω–∞–Ω–∞*.\n\n"
                    f"*–ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:*",
                    parse_mode="Markdown"
                )
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
                await update.message.reply_text(
                    "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*",
                    reply_markup=main_menu_markup,
                    parse_mode="Markdown"
                )
                
                # –û—á–∏—â–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É
                context.user_data.pop("active_task", None)
                return
        
        # –Ø–∫—â–æ –∑–∞–¥–∞—á –Ω–µ–º–∞—î –≤ API, –∞–ª–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞)
        if not open_issues and active_task and not active_task_is_done:
            await update.message.reply_text(
                f"–ó–∞–¥–∞—á–∞ `{active_task}` —â–µ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.",
                reply_markup=issues_view_markup,
                parse_mode="Markdown"
            )
            return
        # –Ø–∫—â–æ –∑–∞–¥–∞—á –Ω–µ–º–∞—î –≤–∑–∞–≥–∞–ª—ñ
        elif not open_issues:
            await update.message.reply_text(
                "*–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á.* _–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É'._",
                reply_markup=main_menu_markup,
                parse_mode="Markdown"
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
        context.user_data["last_issues_list"] = open_issues
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –∑–∞–¥–∞—á—É —è–∫ –∞–∫—Ç–∏–≤–Ω—É
        if len(open_issues) > 0:
            context.user_data["active_task"] = open_issues[0]["key"]
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        text_list = ["*–°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞–¥–∞—á—ñ:*"]
        for idx, issue in enumerate(open_issues, 1):
            active_mark = "‚û°Ô∏è " if issue["key"] == context.user_data.get("active_task") else ""
            text_list.append(f"{active_mark}*`{issue['key']}`* ‚Äî _{issue['status']}_")
        
        text_list.append("\n_–©–æ–± –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç._")
        
        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º Markdown
        await update.message.reply_text("\n".join(text_list), 
                                      reply_markup=issues_view_markup,
                                      parse_mode="Markdown")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É
        if not await show_active_task_details(update, context):
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ")
            await update.message.reply_text(
                "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.*",
                reply_markup=issues_view_markup,
                parse_mode="Markdown"
            )
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–¥–∞—á: {str(e)}")
        await update.message.reply_text(
            f"‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤:* _{str(e)}_",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )


async def return_to_main_from_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É' –∑ ConversationHandler"""
    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ—ó
    context.user_data.pop("full_name", None)
    context.user_data.pop("mobile_number", None)
    context.user_data.pop("division", None)
    context.user_data.pop("department", None)
    context.user_data.pop("service", None)
    context.user_data.pop("description", None)
    context.user_data.pop("attached_photo", None)
    
    await update.message.reply_text("üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*", reply_markup=main_menu_markup, parse_mode="Markdown")
    return ConversationHandler.END


async def return_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É' –∑ —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–¥–∞—á"""
    # –û—á–∏—â–∞—î–º–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ
    if context.user_data and "last_issues_list" in context.user_data:
        del context.user_data["last_issues_list"]
    
    await update.message.reply_text("üè†", reply_markup=main_menu_markup, parse_mode="Markdown")


async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É'"""
    await update.callback_query.answer()
    
    # –û—á–∏—â–∞—î–º–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ
    if context.user_data and "last_issues_list" in context.user_data:
        del context.user_data["last_issues_list"]

    await update.callback_query.message.reply_text("üè†", reply_markup=main_menu_markup, parse_mode="Markdown")


async def issue_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è"""
    data = update.callback_query.data  # —Ñ–æ—Ä–º–∞—Ç ISSUE_<KEY>
    key = data.split("_", 1)[1]
    context.user_data["active_task"] = key
    await update.callback_query.answer()
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é show_active_task_details –¥–ª—è –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        context.user_data["comment_mode"] = True
        # –ê–¥–∞–ø—Ç—É—î–º–æ callback update –¥–ª—è show_active_task_details
        await show_active_task_details(update, context)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ {key}: {str(e)}")
        await update.callback_query.message.reply_text(
            f"‚ùå *–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ* `{key}`. _–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É._",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )


async def exit_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    context.user_data.pop("comment_mode", None)
    await update.message.reply_text("‚ùå *–í–∏—Ö—ñ–¥ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è.*", reply_markup=issues_view_markup, parse_mode="Markdown")


async def comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ"""
    logger.info(f"comment_handler –≤–∏–∫–ª–∏–∫–∞–Ω–æ! –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{update.message.text}'")
    # First check if user has any open tasks
    tg_id = str(update.effective_user.id)
    open_issues = await find_open_issues(tg_id)
    
    if not open_issues:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É'.",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        # Since there are no open issues, make sure comment mode is off
        context.user_data.pop("comment_mode", None)
        return
        
    if not context.user_data.get("comment_mode"):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        return

    key = context.user_data.get("active_task")
    if not key:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop("comment_mode", None)
        await update.message.reply_text(
            "‚ùó *–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–ª—è –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è.*", 
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )
        return

    text = update.message.text
    if not text or text.strip() == "":
        await update.message.reply_text(
            "‚ùå *–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º.*",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )
        return

    try:
        logger.info(f"–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ –∑–∞–¥–∞—á—ñ {key}: '{text[:20]}...'")
        await add_comment_to_jira(key, text)
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–µ–±—Ö—É–∫—É
        from src.jira_webhooks2 import add_message_to_cache
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑ –≤–µ–±—Ö—É–∫—É
        formatted_message = f"üîî <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{text}"
        add_message_to_cache(key, formatted_message)
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ *{key}*.\n_–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª._", 
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ {key}: {str(e)}")
        await update.message.reply_text(
            f"‚ùå *–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ –∑–∞–¥–∞—á—ñ {key}*:\n_{str(e)}_",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )


async def file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –±—É–¥—å-—è–∫–µ –≤–∫–ª–∞–¥–µ–Ω–Ω—è —ñ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ"""
    key = context.user_data.get("active_task")
    if not key:
        await update.message.reply_text("‚ùó *–°–ø–µ—Ä—à—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∑–∞–¥–∞—á—É.*", reply_markup=issues_view_markup, parse_mode="Markdown")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É
    if update.message.document:
        file = update.message.document
        filename = file.file_name
    elif update.message.photo:
        file = update.message.photo[-1]
        filename = f"photo_{file.file_unique_id}.jpg"
    else:
        await update.message.reply_text("‚ùå *–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É.*", reply_markup=issues_view_markup, parse_mode="Markdown")
        return
    
    # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ issues_view_markup –¥–ª—è —Ñ–∞–π–ª—ñ–≤
    reply_markup = issues_view_markup
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª
        tg_file = await file.get_file()
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ –±–∞–π—Ç–∏
        file_bytes = await tg_file.download_as_bytearray()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ bytearray –≤ bytes –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
        if filename:  # Add type guard for filename
            await attach_file_to_jira(key, filename, bytes(file_bytes))
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–æ –∫–µ—à—É
        from src.jira_webhooks2 import add_message_to_cache
        formatted_message = f"üîî <b>–§–∞–π–ª –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ:</b> {filename}"
        add_message_to_cache(key, formatted_message)
        
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª '`{filename}`' –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–æ *{key}*.", reply_markup=reply_markup, parse_mode="Markdown")
        logger.info(f"–§–∞–π–ª '{filename}' —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ {key}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        caption = update.message.caption
        if caption and caption.strip():
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∑ —Ñ–∞–π–ª–æ–º: '{caption[:30]}...'")
            try:
                # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ –æ–∫—Ä–µ–º–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
                await add_comment_to_jira(key, caption)
                
                # –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –ø—ñ–¥–ø–∏—Å—É —Ñ–∞–π–ª—É –¥–æ –∫–µ—à—É
                from src.jira_webhooks2 import add_message_to_cache
                formatted_message = f"üîî <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n{caption}"
                add_message_to_cache(key, formatted_message)
                
                await update.message.reply_text(
                    f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –∑ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ *{key}*.", 
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                logger.info(f"–¢–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —è–∫ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ {key}")
            except Exception as e:
                error_message = str(e)
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {key}: {error_message}")
                await update.message.reply_text(
                    f"‚ùå *–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è:* _{error_message}_",
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, —è–∫—â–æ –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        if context.user_data.get("comment_mode", False):
            await update.message.reply_text(
                "_–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø–∏—Å–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏._",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        error_message = str(e)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –¥–æ {key}: {error_message}")
        await update.message.reply_text(f"‚ùå *–ü–æ–º–∏–ª–∫–∞:* —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. _{error_message}_", 
                                      reply_markup=reply_markup,
                                      parse_mode="Markdown")


async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ"""
    key = context.user_data.get("active_task")
    if not key:
        await update.message.reply_text("‚ùó *–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ.*", reply_markup=issues_view_markup, parse_mode="Markdown")
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ –∑ Jira
        issue = await get_full_issue_info(key)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å Done)
        if issue.get('status', '').lower() == 'done' or issue.get('statusCategory', '').lower() == 'done':
            # –Ø–∫—â–æ –∑–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await update.message.reply_text(
                f"*–°—Ç–∞—Ç—É—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞:*\n‚û°Ô∏è *`{key}`* ‚Äî *–í–∏–∫–æ–Ω–∞–Ω–∞*.\n\n"
                f"*–ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:*",
                parse_mode="Markdown"
            )
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await update.message.reply_text(
                "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*",
                reply_markup=main_menu_markup,
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É
            context.user_data.pop("active_task", None)
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from fixed_issue_formatter import format_issue_info, format_issue_text
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        formatted_issue = format_issue_info(issue)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        text = format_issue_text(formatted_issue)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        text = '\u200B' + text
        
        logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ {key}: {issue.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        await update.message.reply_text(
            text,
            reply_markup=issues_view_markup,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Markdown/HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ {key}: {str(e)}")
        await update.message.reply_text(
            f"‚ùå *–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ* `{key}`.",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )


async def create_issue_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ"""
    logger.info(f"create_issue_start –≤–∏–∫–ª–∏–∫–∞–Ω–æ! –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{update.message.text}'")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç
    if update.message.text != "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É":
        logger.warning(f"create_issue_start –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º: '{update.message.text}'")
        return ConversationHandler.END
    
    profile = context.user_data.get("profile")
    tg_id = str(update.effective_user.id)
    logger.info(f"create_issue_start: tg_id={tg_id}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞–¥–∞—á—ñ
    open_issues = await find_open_issues(tg_id)
    if open_issues:
        key = open_issues[0]["key"]
        status = open_issues[0]["status"]
        await update.message.reply_text(
            f"–£ –≤–∞—Å —î –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∑–∞–¥–∞—á–∞ *`{key}`* (—Å—Ç–∞—Ç—É—Å: _{status}_).\n"
            "_–°–ø–æ—á–∞—Ç–∫—É –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —ñ—Å–Ω—É—é—á–æ—ó._",
            reply_markup=issues_view_markup,
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π - –±–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –æ–¥—Ä–∞–∑—É –¥–æ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É
    if profile and profile.get("division") and profile.get("department"):
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.update({
            "full_name": profile["full_name"],
            "division": profile["division"],
            "department": profile["department"],
            "mobile_number": profile.get("mobile_number", ""),
            "telegram_id": profile["telegram_id"],
            "telegram_username": profile.get("telegram_username", ""),
            "account_id": profile.get("account_id")
        })
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {profile['full_name']} –∑ –ø–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É –Ω–∞–ø—Ä—è–º—É
        await update.message.reply_text(
            "*–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å:*",
            reply_markup=service_selection_markup(SERVICES),
            parse_mode="Markdown"
        )
        return SERVICE
    elif profile:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –∞–ª–µ –≤ –Ω—å–æ–≥–æ –Ω–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ - –¥–æ–ø–æ–≤–Ω—é—î–º–æ —ó—Ö
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {profile['full_name']}, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é")
        context.user_data.update({
            "full_name": profile["full_name"],
            "mobile_number": profile.get("mobile_number", ""),
            "telegram_id": profile["telegram_id"],
            "telegram_username": profile.get("telegram_username", ""),
            "account_id": profile.get("account_id")
        })
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–∞–º–µ –≤—ñ–¥—Å—É—Ç–Ω—î
        if not profile.get("division"):
            await update.message.reply_text(
                "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:*",
                reply_markup=ReplyKeyboardMarkup(
                    [[div] for div in DIVISIONS] + [["üîô –ù–∞–∑–∞–¥"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                ),
                parse_mode="Markdown"
            )
            return DIVISION
        elif not profile.get("department"):
            context.user_data["division"] = profile["division"]
            await update.message.reply_text(
                "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:*",
                reply_markup=ReplyKeyboardMarkup(
                    [[dept] for dept in DEPARTMENTS] + [["üîô –ù–∞–∑–∞–¥"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                ),
                parse_mode="Markdown"
            )
            return DEPARTMENT
    else:
        # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É—î–º–æ –ü–Ü–ë
        markup = ReplyKeyboardMarkup(
            [["üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "*–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ FULL_NAME –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ tg_id={tg_id}")
        return FULL_NAME


async def full_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ü–Ü–ë –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    full_name = update.message.text.strip()
    tg_id = str(update.effective_user.id)
    logger.info(f"full_name_handler –≤—ã–∑–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω–æ –∏–º—è: '{full_name}', tg_id={tg_id}")
    
    if len(full_name) < 2:
        await update.message.reply_text(
            "‚ùå *–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ.* _–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:_",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        return FULL_NAME
        
    context.user_data["full_name"] = full_name
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {full_name}")
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    await update.message.reply_text(
        "*–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É* _—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É':_",
        reply_markup=contact_request_markup,
        parse_mode="Markdown"
    )
    logger.info(f"–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ MOBILE_NUMBER –¥–ª—è tg_id={tg_id}")
    return MOBILE_NUMBER

async def mobile_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    mobile_number = update.message.text.strip()
    tg_id = str(update.effective_user.id)
    logger.info(f"mobile_number_handler –≤–∏–∫–ª–∏–∫–∞–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä: '{mobile_number}', tg_id={tg_id}")
    
    # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if not mobile_number or (not mobile_number.startswith('+') and not mobile_number.isdigit()):
        await update.message.reply_text(
            "‚ùå *–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É* _—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É':_",
            reply_markup=contact_request_markup,
            parse_mode="Markdown"
        )
        return MOBILE_NUMBER
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    context.user_data["mobile_number"] = mobile_number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
    markup = ReplyKeyboardMarkup(
        [[div] for div in DIVISIONS] + [["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:*",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    logger.info(f"–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ DIVISION –¥–ª—è tg_id={tg_id}")
    return DIVISION

async def division_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É"""
    text = update.message.text
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ ConversationHandler
        await update.message.reply_text(
            "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
    if not context.user_data.get("full_name"):
        await update.message.reply_text(
            "*–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        return FULL_NAME
    
    context.user_data["division"] = text
    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª: {text}")
    
    # –ó–∞–ø–∏—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É
    markup = ReplyKeyboardMarkup(
        [[dept] for dept in DEPARTMENTS] + [["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "*–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:*",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    return DEPARTMENT

async def department_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É"""
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ ConversationHandler
        await update.message.reply_text(
            "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    
    context.user_data["department"] = text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É
    await update.message.reply_text(
        "*–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å:*",
        reply_markup=service_selection_markup(SERVICES),
        parse_mode="Markdown"
    )
    return SERVICE


async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–±—ñ—Ä —Å–µ—Ä–≤—ñ—Å—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏"""
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ ConversationHandler
        await update.message.reply_text(
            "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*",
            reply_markup=main_menu_markup,
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    context.user_data["service"] = text
    await update.message.reply_text("*–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —É –∫—ñ–ª—å–∫–∞ —Ä–µ—á–µ–Ω—å:*", reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    return DESCRIPTION


async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ —ñ –ø–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–æ–∫"""
    # –û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ —ñ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
    if update.message.photo:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ
        description = update.message.caption or ""
        if not description.strip():
            await update.message.reply_text(
                "‚ùå *–ü–æ–º–∏–ª–∫–∞:* –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –≤ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ.",
                parse_mode="Markdown"
            )
            return DESCRIPTION
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –≤–µ—Ä—Å—ñ—é —Ñ–æ—Ç–æ
        context.user_data["attached_photo"] = {
            "file_id": photo.file_id,
            "file_unique_id": photo.file_unique_id,
            "caption": description
        }
        context.user_data["description"] = description
        
        await update.message.reply_text(
            "üì∏ *–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* –í–æ–Ω–æ –±—É–¥–µ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è."
        )
    else:
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å
        description = update.message.text
        if not description or not description.strip():
            await update.message.reply_text(
                "‚ùå *–ü–æ–º–∏–ª–∫–∞:* –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º.",
                parse_mode="Markdown"
            )
            return DESCRIPTION
        context.user_data["description"] = description
    
    # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    summary = (
        f"*–ü–Ü–ë:* {context.user_data.get('full_name','')}\n"
        f"*–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:* {context.user_data.get('division','')}\n"
        f"*–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:* {context.user_data.get('department','')}\n"
        f"*–°–µ—Ä–≤—ñ—Å:* {context.user_data.get('service','')}\n"
        f"*–û–ø–∏—Å:* _{context.user_data.get('description','')}_"
    )
    
    if context.user_data.get("attached_photo"):
        summary += "\nüì∏ *–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ*"
    
    await update.message.reply_text(summary, reply_markup=confirm_issue_markup, parse_mode="Markdown")
    return CONFIRM


async def confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É –∞–±–æ –ù–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()
    if (query.data == "BACK_TO_SERVICE"):
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Å–µ—Ä–≤—ñ—Å—É
        await query.message.reply_text(
            "*–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å:*",
            reply_markup=service_selection_markup(SERVICES),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SERVICES –∏–∑ constants.py
            parse_mode="Markdown"
        )
        return SERVICE
    
    # CONFIRM_CREATE
    bot_vars = context.user_data.copy()
    
    # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å –¥–ª—è –∑–∞–¥–∞—á—ñ
    description = (
        f"–ü–Ü–ë: {bot_vars.get('full_name','')}\n"
        f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {bot_vars.get('division','')}\n"
        f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {bot_vars.get('department','')}\n"
        f"–°–µ—Ä–≤—ñ—Å: {bot_vars.get('service','')}\n"
        f"–û–ø–∏—Å: {bot_vars.get('description','')}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if "issuetype" not in bot_vars:
        bot_vars["issuetype"] = JIRA_ISSUE_TYPE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    # –ò–∑–º–µ–Ω—è–µ–º –∫–ª—é—á —Å project_key –Ω–∞ project (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å fields_mapping.yaml)
    if "project" not in bot_vars:
        bot_vars["project"] = JIRA_PROJECT_KEY  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º summary –∏ description
    bot_vars["summary"] = f"{bot_vars.get('service','')} - {bot_vars.get('description','')[:50]}"
    bot_vars["description"] = description

    # Add or update telegram fields for Jira
    # telegram_id is required
    if not bot_vars.get("telegram_id"):
        bot_vars["telegram_id"] = str(update.effective_user.id)
    
    # telegram_username is optional, only add if user has it
    username = update.effective_user.username
    if username:  # only add if not None or empty
        bot_vars["telegram_username"] = username
    elif "telegram_username" in bot_vars:  # remove if exists but empty
        del bot_vars["telegram_username"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if bot_vars.get("account_id") is None and JIRA_REPORTER_ACCOUNT_ID:
        bot_vars["account_id"] = JIRA_REPORTER_ACCOUNT_ID
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é build_jira_payload –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è payload
    from services import build_jira_payload
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥–∏ ID
    if "division" in bot_vars and bot_vars["division"] in DIVISION_ID_MAPPINGS:
        field_id = JIRA_FIELD_IDS["division"]
        bot_vars[field_id] = {"id": DIVISION_ID_MAPPINGS[bot_vars["division"]]["id"]}
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è division: {bot_vars['division']} -> {bot_vars[field_id]}")
    
    if "department" in bot_vars and bot_vars["department"] in DEPARTMENT_ID_MAPPINGS:
        field_id = JIRA_FIELD_IDS["department"]
        bot_vars[field_id] = {"id": DEPARTMENT_ID_MAPPINGS[bot_vars["department"]]["id"]}
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è department: {bot_vars['department']} -> {bot_vars[field_id]}")
    
    if "service" in bot_vars and bot_vars["service"] in SERVICE_ID_MAPPINGS:
        field_id = JIRA_FIELD_IDS["service"]
        bot_vars[field_id] = {"id": SERVICE_ID_MAPPINGS[bot_vars["service"]]["id"]}
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è service: {bot_vars['service']} -> {bot_vars[field_id]}")
    
    payload = build_jira_payload(bot_vars)
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á—ñ –∑ –ø–æ–ª—è–º–∏: {payload}")
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–ø –∑–∞–¥–∞—á—ñ: {bot_vars.get('issuetype')}, –ø—Ä–æ–µ–∫—Ç: {bot_vars.get('project')}")
        
        # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ç–∏–ø –∑–∞–¥–∞—á—ñ —Ç–∞ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω—ñ
        if 'fields' in payload and 'project' not in payload['fields']:
            payload['fields']['project'] = {'key': 'SD'} # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ–µ–∫—Ç
            logger.info(f"–î–æ–¥–∞–Ω–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–æ–µ–∫—Ç: SD")
            
        if 'fields' in payload and 'issuetype' not in payload['fields']:
            payload['fields']['issuetype'] = {'name': 'Telegram'} # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ç–∏–ø
            logger.info(f"–î–æ–¥–∞–Ω–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ç–∏–ø –∑–∞–¥–∞—á—ñ: Telegram")
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        if 'fields' in payload and 'summary' not in payload['fields']:
            await query.message.reply_text("‚ùå *–ü–æ–º–∏–ª–∫–∞:* _–≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á—ñ_", reply_markup=issues_view_markup, parse_mode="Markdown")
            return
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π payload
        issue_key = await create_jira_issue(payload)
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É
        context.user_data["active_task"] = issue_key
        # –í–∫–ª—é—á–∞—î–º–æ —Ä–µ–∂–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        context.user_data["comment_mode"] = True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–µ —Ñ–æ—Ç–æ
        attached_photo = context.user_data.get("attached_photo")
        if attached_photo:
            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î–º–æ —Ñ–æ—Ç–æ –¥–æ –∑–∞–¥–∞—á—ñ
                from telegram import Bot
                
                bot = Bot(token=context.bot.token)
                file = await bot.get_file(attached_photo["file_id"])
                filename = f"photo_{attached_photo['file_unique_id']}.jpg"
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —É –ø–∞–º'—è—Ç—å
                file_data = await file.download_as_bytearray()
                
                # –ü—Ä–∏–∫—Ä—ñ–ø–ª—é—î–º–æ –¥–æ Jira (–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ bytearray –≤ bytes)
                await attach_file_to_jira(issue_key, filename, bytes(file_data))
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ñ–æ—Ç–æ
                del context.user_data["attached_photo"]
                
                await query.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: *{issue_key}*\n"
                    f"üì∏ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ –¥–æ –∑–∞–¥–∞—á—ñ!\n"
                    f"_–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏._", 
                    reply_markup=issues_view_markup,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}: {str(e)}")
                await query.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: *{issue_key}*\n"
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ: _{str(e)}_\n"
                    f"_–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ._", 
                    reply_markup=issues_view_markup,
                    parse_mode="Markdown"
                )
        else:
            # –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ issues_view_markup –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await query.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: *{issue_key}*\n_–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª._", 
                                        reply_markup=issues_view_markup,
                                        parse_mode="Markdown")
    except JiraApiError as e:
        error_message = str(e)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        if "400" in error_message:
            if "field" in error_message.lower() and "required" in error_message.lower():
                error_message = "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ –∑–∞–ø–∏—Ç—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è."
            elif "issuetype" in error_message.lower():
                error_message = "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –∑–∞–¥–∞—á—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø."
            elif "project" in error_message.lower():
                error_message = "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–µ–∫—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–æ–µ–∫—Ç."
            else:
                error_message = "–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑–∞–ø–∏—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ."
        elif "401" in error_message or "403" in error_message:
            error_message = "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é –≤ Jira. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        elif "timeout" in error_message.lower():
            error_message = "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Jira. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ: {str(e)}")
        await query.message.reply_text(f"‚ùå *–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ:* _{error_message}_", reply_markup=issues_view_markup, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ: {str(e)}")
        await query.message.reply_text(f"‚ùå *–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ.* _–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º._", reply_markup=issues_view_markup, parse_mode="Markdown")
    
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞—Ç–∏ ConversationHandler"""
    await update.message.reply_text("‚ùå *–°–∫–∞—Å–æ–≤–∞–Ω–æ.*", reply_markup=issues_view_markup, parse_mode="Markdown")
    return ConversationHandler.END


async def show_active_task_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –∑–∞–¥–∞—á—É"""
    key = context.user_data.get("active_task")
    if not key:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if update.callback_query:
            await update.callback_query.message.reply_text("‚ùó *–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.*", reply_markup=issues_view_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùó *–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.*", reply_markup=issues_view_markup, parse_mode="Markdown")
        return False

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ –∑ Jira
        issue = await get_full_issue_info(key)
        
        # –õ–æ–≥—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–º
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞–¥–∞—á—ñ {key} –≤—ñ–¥ Jira API: department={issue.get('department')}, division={issue.get('division')}, service={issue.get('service')}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from fixed_issue_formatter import format_issue_info, format_issue_text
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        formatted_issue = format_issue_info(issue)
        logger.info(f"–í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞–¥–∞—á—ñ {key}: department={formatted_issue.get('department')}, division={formatted_issue.get('division')}, service={formatted_issue.get('service')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        text = format_issue_text(formatted_issue)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        text = '\u200B' + text
        
        # Set comment mode without prompting to write a comment
        context.user_data["comment_mode"] = True
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if update.callback_query:
            await update.callback_query.message.reply_text(
                text,
                reply_markup=issues_view_markup,
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Markdown/HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=issues_view_markup,
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Markdown/HTML –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            )
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ {key}: {str(e)}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if update.callback_query:
            await update.callback_query.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ {key}: {str(e)}",
                reply_markup=issues_view_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ {key}: {str(e)}",
                reply_markup=issues_view_markup
            )
        return False


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"""
    await update.message.reply_text(
        "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞–Ω–∞–ª—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: https://t.me/+zoabM0XuLeo2NzY6\n\n"
        "–¢–∞–º –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
        reply_markup=main_menu_markup
    )


def register_handlers(application):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —É Application"""
    # ConversationHandler –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É$"), create_issue_start)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), full_name_handler),
                       MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            MOBILE_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), mobile_number_handler), 
                          MessageHandler(filters.CONTACT, contact_handler),
                          MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            DIVISION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), division_handler),
                      MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), department_handler),
                        MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), service_handler),
                     MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), description_handler),
                         MessageHandler(filters.PHOTO, description_handler),
                         MessageHandler(filters.Regex("^üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É$"), return_to_main_from_conversation)],
            CONFIRM: [CallbackQueryHandler(confirm_callback, pattern="^(CONFIRM_CREATE|BACK_TO_SERVICE)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
        per_message=False,
        name="create_issue_conversation"
    )

    # –í–∞–∂–Ω–æ: ConversationHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(conv_handler)
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É"), create_task_button_handler))
    application.add_handler(MessageHandler(filters.Regex("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ /start"), restart_handler))
    application.add_handler(MessageHandler(filters.Regex("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"), re_auth_handler))
    application.add_handler(MessageHandler(filters.Regex("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"), my_profile_handler))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_handler(MessageHandler(filters.Regex("üë§ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"), continue_without_auth))
    application.add_handler(MessageHandler(filters.Regex("üßæ –ú–æ—ó –∑–∞–¥–∞—á—ñ"), my_issues))
    application.add_handler(CallbackQueryHandler(issue_callback, pattern="^ISSUE_"))
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ"
    application.add_handler(CallbackQueryHandler(back_to_main_callback, pattern="^BACK_TO_MAIN$"))
    application.add_handler(MessageHandler(filters.Regex("üè† –í–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É"), return_to_main))
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–¥–∞—á
    application.add_handler(MessageHandler(filters.Regex("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ"), update_issues_status))
    application.add_handler(MessageHandler(filters.Regex("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ"), check_status))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, file_handler))
    application.add_handler(MessageHandler(filters.Regex("‚ùå –í–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è"), exit_comment))
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–º–æ–≥–∏
    application.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"), help_handler))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(üÜï|üßæ|‚úÖ|üè†|üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ|üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ /start|üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è|üë§|‚ùå|‚ÑπÔ∏è)"), 
        comment_handler
    ))