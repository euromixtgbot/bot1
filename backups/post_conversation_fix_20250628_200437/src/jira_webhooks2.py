import json
import logging
import asyncio
import traceback
from typing import Dict, Any, Optional, List, Tuple
import re
import urllib.parse
import time
from collections import defaultdict
from io import BytesIO

import httpx
import requests
from aiohttp import web

from config.config import JIRA_DOMAIN, JIRA_API_TOKEN, JIRA_EMAIL, JIRA_REPORTER_ACCOUNT_ID, TELEGRAM_TOKEN
from src.services import find_user_by_jira_issue_key
from src.fixed_issue_formatter import format_issue_info, format_issue_text
from src.jira_attachment_utils import build_attachment_urls, download_file_from_jira, normalize_jira_domain
from src.attachment_processor import process_attachments_for_issue

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
# –¢–∏–ø–∏ –ø–æ–¥—ñ–π, –Ω–∞ —è–∫—ñ —Ä–µ–∞–≥—É—î–º–æ
EVENT_ISSUE_UPDATED = "jira:issue_updated"
EVENT_COMMENT_CREATED = "comment_created"
EVENT_ISSUE_CREATED = "jira:issue_created"
EVENT_ATTACHMENT_CREATED = "attachment_created"

# –ö–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {issue_key: [{"text": "message_text", "time": timestamp}]]}
# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
RECENT_MESSAGES_CACHE: Dict[str, List[Dict[str, Any]]] = defaultdict(list)
CACHE_TTL = 300  # 5 minutes

# === –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫—ñ–≤ ===

async def handle_webhook(request: web.Request) -> web.Response:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Jira.
    
    Args:
        request: –ó–∞–ø–∏—Ç –≤–µ–±—Ö—É–∫–∞
        
    Returns:
        web.Response: –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Jira
    """
    try:
        # Load and validate webhook data
        try:
            webhook_data = await request.json()
            logger.debug(f"Webhook data: {json.dumps(webhook_data, indent=2, ensure_ascii=False)}")
        except ValueError:
            logger.error("Invalid JSON in webhook request")
            return web.json_response({"status": "error", "message": "Invalid JSON"}, status=400)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–¥—ñ—ó
        event_type = webhook_data.get('webhookEvent', '')
        if not event_type:
            logger.warning("No event type in request")
            return web.json_response({"status": "error", "message": "Missing event type"}, status=400)
            
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó: {event_type}")
        
        # Validate required fields based on event type
        if not await validate_webhook_data(webhook_data, event_type):
            logger.error(f"Invalid webhook data for event type: {event_type}")
            return web.json_response({"status": "error", "message": "Invalid webhook data"}, status=400)
        
        # Route to appropriate handler
        handler = None
        if event_type == EVENT_ISSUE_UPDATED:
            handler = handle_issue_updated
        elif event_type == EVENT_COMMENT_CREATED:
            handler = handle_comment_created
        elif event_type == EVENT_ISSUE_CREATED:
            handler = handle_issue_created
        elif event_type == EVENT_ATTACHMENT_CREATED:
            handler = handle_attachment_created
        else:
            logger.warning(f"Unsupported event type: {event_type}")
            return web.json_response({"status": "error", "message": f"Unsupported event type: {event_type}"}, status=400)
            
        try:
            await handler(webhook_data)
        except Exception as e:
            logger.error(f"Error in {event_type} handler: {str(e)}", exc_info=True)
            # Don't return error to Jira - we've already received the webhook
            # Just log it and return success to prevent retries
            
        return web.json_response({"status": "success", "message": f"Event processed: {event_type}"})
        
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}", exc_info=True)
        return web.json_response({"status": "error", "message": "Internal server error"}, status=500)

async def validate_webhook_data(data: Dict[str, Any], event_type: str) -> bool:
    """
    Validates that the webhook data contains all required fields for the given event type.
    
    Args:
        data: The webhook data to validate
        event_type: The type of event being processed
        
    Returns:
        bool: True if the data is valid, False otherwise
    """
    try:
        if event_type == EVENT_ISSUE_UPDATED:
            return bool(
                data.get('issue', {}).get('key') and
                data.get('changelog', {}).get('items')
            )
            
        elif event_type == EVENT_COMMENT_CREATED:
            return bool(
                data.get('issue', {}).get('key') and
                data.get('comment', {}).get('author')
            )
            
        elif event_type == EVENT_ISSUE_CREATED:
            return bool(
                data.get('issue', {}).get('key') and
                data.get('issue', {}).get('fields', {}).get('creator')
            )
            
        elif event_type == EVENT_ATTACHMENT_CREATED:
            return bool(
                data.get('attachment') and
                (data.get('issue', {}).get('key') or
                 # Allow issue key to be extracted from attachment URL
                 any(url_field in data.get('attachment', {}) for url_field in ['self', 'content', 'url']))
            )
        # Handle 'issue_property_set' event type
        elif event_type == 'issue_property_set':
            # Add specific validation for 'issue_property_set' if needed, or simply return True if no specific validation is required yet.
            # For now, let's assume it's valid if it has an issue key.
            return bool(data.get('issue', {}).get('key'))
            
        return False
        
    except Exception as e:
        logger.error(f"Error validating webhook data: {str(e)}", exc_info=True)
        return False

def get_status_emoji(status: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ.
    
    Args:
        status: –ù–∞–∑–≤–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ
        
    Returns:
        str: –ï–º–æ–¥–∑—ñ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–∞—Ç—É—Å—É
    """
    status_lower = status.lower()
    
    # –°—Ç–∞—Ç—É—Å–∏ "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ"
    if any(word in status_lower for word in ['–æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', '–æ–∂–∏–¥–∞–Ω–∏–∏', 'pending', 'waiting']):
        return "üîµ"
    
    # –°—Ç–∞—Ç—É—Å–∏ "–í —Ä–æ–±–æ—Ç—ñ"
    if any(word in status_lower for word in ['—Ä–æ–±–æ—Ç—ñ', '—Ä–∞–±–æ—Ç–µ', 'progress', 'doing', 'active']):
        return "üîµ"
    
    # –°—Ç–∞—Ç—É—Å–∏ "–í–∏–∫–æ–Ω–∞–Ω–æ/–ó–∞–∫—Ä–∏—Ç–æ"
    if any(word in status_lower for word in ['–≤–∏–∫–æ–Ω–∞–Ω–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–∑–∞–∫—Ä–∏—Ç–æ', '–∑–∞–∫—Ä—ã—Ç–æ', 'done', 'closed', 'resolved']):
        return "üü¢"
    
    # –°—Ç–∞—Ç—É—Å–∏ "–í—ñ–¥–∫—Ä–∏—Ç–æ/–ù–æ–≤–∏–π"
    if any(word in status_lower for word in ['–≤—ñ–¥–∫—Ä–∏—Ç–æ', '–æ—Ç–∫—Ä—ã—Ç–æ', '–Ω–æ–≤–∏–π', '–Ω–æ–≤–∞—è', 'open', 'new', 'to do']):
        return "‚ö™Ô∏è"
    
    # –°—Ç–∞—Ç—É—Å–∏ "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    if any(word in status_lower for word in ['—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'testing', 'review']):
        return "üîµ"
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return "üîµ"

async def handle_issue_updated(webhook_data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ Jira.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Telegram.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ
        changelog = webhook_data.get('changelog', {})
        items = changelog.get('items', [])
        
        # –®—É–∫–∞—î–º–æ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        status_change = next((item for item in items if item.get('field') == 'status'), None)
        
        if not status_change:
            logger.info("–ó–º—ñ–Ω–∞ –∑–∞–¥–∞—á—ñ –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑—ñ –∑–º—ñ–Ω–æ—é —Å—Ç–∞—Ç—É—Å—É")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        new_status = status_change.get('toString', '')
        old_status = status_change.get('fromString', '')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–¥–∞—á—É
        issue_key = webhook_data.get('issue', {}).get('key', '')
        issue_summary = webhook_data.get('issue', {}).get('fields', {}).get('summary', '')
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ {issue_key} –∑–º—ñ–Ω–∏–≤—Å—è –∑ '{old_status}' –Ω–∞ '{new_status}'")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –≤—ñ–¥ —è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ–π—à–ª–∞ –∑–º—ñ–Ω–∞
        author_info = None
        if 'user' in webhook_data:
            author_info = webhook_data.get('user', {})
        else:
            # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –≤ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ü—è—Ö
            author_info = webhook_data.get('comment', {}).get('author', {})
            
        # –Ø–∫—â–æ –∑–º—ñ–Ω–∞ –≤—ñ–¥ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —ñ–≥–Ω–æ—Ä—É—î–º–æ
        if author_info:
            from config.config import JIRA_REPORTER_ACCOUNT_ID
            author_id = author_info.get('accountId', '')
            if author_id == JIRA_REPORTER_ACCOUNT_ID:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {author_id})")
                return
                
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram –∑–∞ –∫–ª—é—á–µ–º –∑–∞–¥–∞—á—ñ
        user_data = await find_user_by_jira_issue_key(issue_key)
        
        if not user_data:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
        
        # –ì–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        status_emoji = get_status_emoji(new_status)
        message = (
            f"üÜï <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñüí°{issue_key} –æ–Ω–æ–≤–ª–µ–Ω–æ:</b>\n\n"
            f"{status_emoji} <b>{new_status}</b>‚ùî"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –¥—É–±–ª—ñ–∫–∞—Ç–æ–º
        if is_duplicate_message(issue_key, message):
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É
        add_message_to_cache(issue_key, message)
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Telegram
        await send_telegram_message(user_data['telegram_id'], message)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ: {str(e)}", exc_info=True)

async def handle_comment_created(webhook_data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –≤ Jira.
    –ü–µ—Ä–µ—Å–∏–ª–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Telegram.
    """
    try:
        # Get comment and issue data
        comment = webhook_data.get('comment', {})
        issue_key = webhook_data.get('issue', {}).get('key', '')
        
        logger.info(f"Processing new comment for issue {issue_key}")
        logger.debug(f"Full webhook data: {json.dumps(webhook_data, indent=2, ensure_ascii=False)}")
        
        # Skip if empty comment and no attachments
        comment_body = comment.get('body', '').strip()
        
        # Skip comments from system/bot users
        comment_author = comment.get('author', {})
        author_name = comment_author.get('displayName', '')
        author_id = comment_author.get('accountId', '')
        
        logger.debug(f"Comment author: {author_name} (ID: {author_id})")
        
        from config.config import JIRA_REPORTER_ACCOUNT_ID
        if "Telegram Bot" in author_name or author_id == JIRA_REPORTER_ACCOUNT_ID:
            logger.info(f"Skipping comment from system user: {author_name}")
            return
        
        # Find Telegram user
        user_data = await find_user_by_jira_issue_key(issue_key)
        if not user_data:
            logger.warning(f"No Telegram user found for issue {issue_key}")
            return
            
        logger.debug(f"Found Telegram user: {user_data}")
        
        # Collect all attachments from different possible locations
        attachments = []
        
        # 1. Direct attachments on the comment
        if 'attachment' in comment:
            direct_attachments = comment.get('attachment', [])
            logger.debug(f"Found {len(direct_attachments)} direct attachments")
            attachments.extend(direct_attachments)
            
        if 'attachments' in comment:
            plural_attachments = comment.get('attachments', [])
            logger.debug(f"Found {len(plural_attachments)} attachments in plural form")
            attachments.extend(plural_attachments)
            
        # 2. Embedded attachments in comment body
        if comment_body:
            embedded = extract_embedded_attachments(comment_body)
            if embedded:
                logger.info(f"Found {len(embedded)} embedded attachments in comment")
                logger.debug(f"Embedded attachments: {json.dumps(embedded, indent=2)}")
                attachments.extend(embedded)
                
        # 3. Special content structure (some Jira versions)
        if 'content' in comment:
            content = comment.get('content', [])
            for item in content:
                if isinstance(item, dict) and 'attachment' in item:
                    logger.debug(f"Found attachment in content structure: {json.dumps(item['attachment'], indent=2)}")
                    attachments.append(item['attachment'])
                    
        # Log attachment info
        if attachments:
            logger.info(f"Found {len(attachments)} total attachments")
            for idx, att in enumerate(attachments, 1):
                filename = att.get('filename', 'unknown')
                att_id = att.get('id', 'no-id')
                att_url = att.get('content', att.get('self', ''))
                logger.info(f"Attachment {idx}: {filename} (ID: {att_id})")
                logger.debug(f"Attachment {idx} details: {json.dumps(att, indent=2)}")
                
        # Prepare and send the message
        message_parts = []
        
        # Add comment text if present
        if comment_body:
            formatted_text = format_comment_text(comment_body)
            if formatted_text:  # Only add if there's actual content after formatting
                message_parts.extend([
                    "üîî <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>\n\n",
                    formatted_text
                ])
        # –ù–µ –¥–æ–¥–∞—î–º–æ –±–ª–æ–∫ –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        # Send main message (only if there's text content)
        message = "\n".join(message_parts)
        if message:
            await send_telegram_message(user_data['telegram_id'], message)
            
        # Process and send attachments
        if attachments:
            logger.info("Starting to process attachments")
            await process_attachments(attachments, issue_key, user_data['telegram_id'])
            
    except Exception as e:
        logger.error(f"Error processing new comment: {str(e)}", exc_info=True)
        import traceback
        logger.error(f"Full traceback: {traceback.format_exc()}")

async def handle_issue_created(webhook_data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ Jira.
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram, —è–∫—â–æ –∑–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç.
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–¥–∞—á—É
        issue = webhook_data.get('issue', {})
        issue_key = issue.get('key', '')
        issue_summary = issue.get('fields', {}).get('summary', '')
        issue_creator = issue.get('fields', {}).get('creator', {}).get('displayName', '')
        
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ {issue_key} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {issue_creator}: {issue_summary[:100]}...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç
        if "Telegram Bot" in issue_creator:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–¥–∞—á—É, —Å—Ç–≤–æ—Ä–µ–Ω—É —á–µ—Ä–µ–∑ –±–æ—Ç")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –∞–±–æ —á–µ—Ä–µ–∑ –ø–æ—à—É–∫
        telegram_id = None
        
        # –®—É–∫–∞—î–º–æ –≤ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–ª—è—Ö
        custom_fields = issue.get('fields', {})
        for field_key, field_value in custom_fields.items():
            if field_key == 'customfield_10145':  # telegram_id –ø–æ–ª–µ
                telegram_id = field_value
                break
        
        if not telegram_id:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∞—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        formatted_issue = format_issue_info(issue)
        issue_text = format_issue_text(formatted_issue)
        
        # –ì–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
        message = (
            f"üÜï <b>–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –∑–∞–¥–∞—á—É</b>\n\n"
            f"{issue_text}"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –¥—É–±–ª—ñ–∫–∞—Ç–æ–º
        if is_duplicate_message(issue_key, message):
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É
        add_message_to_cache(issue_key, message)
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Telegram
        await send_telegram_message(telegram_id, message)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ: {str(e)}", exc_info=True)

async def handle_attachment_created(webhook_data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è –≤ Jira.
    –ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è —ñ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –≤ Telegram.
    """
    try:
        # –õ–æ–≥—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é attachment_created: {json.dumps(webhook_data, indent=2)}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è
        attachment = webhook_data.get('attachment', {})
        if isinstance(attachment, list):
            attachment = attachment[0] if attachment else {}
        if not attachment:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é attachment_created –±–µ–∑ –¥–∞–Ω–∏—Ö –≤–∫–ª–∞–¥–µ–Ω–Ω—è")
            return
            
        attachment_id = attachment.get('id', '')
        attachment_url = attachment.get('self', '')
        filename = attachment.get('filename', '—Ñ–∞–π–ª')
        
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è: {filename} (ID: {attachment_id})")
        logger.debug(f"–î–µ—Ç–∞–ª—ñ –≤–∫–ª–∞–¥–µ–Ω–Ω—è: {json.dumps(attachment, indent=2)}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–¥–∞—á—É, –¥–æ —è–∫–æ—ó –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∫–ª–∞–¥–µ–Ω–Ω—è
        issue_key = None
        
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∫–ª—é—á –∑–∞–¥–∞—á—ñ –≤ –¥–∞–Ω–∏—Ö –≤–µ–±—Ö—É–∫–∞
        if 'issue' in webhook_data:
            issue = webhook_data.get('issue', {})
            issue_key = issue.get('key', '')
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á –∑–∞–¥–∞—á—ñ –≤ –¥–∞–Ω–∏—Ö –≤–µ–±—Ö—É–∫–∞: {issue_key}")
            
        # –°–ø–æ—Å—ñ–± 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è issue_key —á–µ—Ä–µ–∑ REST API, —è–∫—â–æ –º–∞—î–º–æ attachment_id
        if not issue_key and attachment_id:
            max_retries = 3
            base_retry_delay = 1  # Start with 1 second
            api_url = f"https://{JIRA_DOMAIN}/rest/api/3/attachment/{attachment_id}"
            auth = httpx.BasicAuth(JIRA_EMAIL, JIRA_API_TOKEN)
            headers = {
                'X-Atlassian-Token': 'no-check',
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Connection': 'keep-alive'
            }
            
            for attempt in range(max_retries):
                try:
                    limits = httpx.Limits(max_keepalive_connections=5, max_connections=10)
                    transport = httpx.AsyncHTTPTransport(
                        retries=3,
                        verify=True,
                        http2=True,
                        limits=limits
                    )
                    async with httpx.AsyncClient(
                        timeout=30.0,
                        auth=auth,
                        transport=transport,
                        verify=True,
                        limits=limits,
                        http2=True,
                        trust_env=True  # Added this line
                    ) as client:
                        response = await client.get(api_url, headers=headers)
                        response.raise_for_status()
                        attachment_info = response.json()
                        
                        # –í —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö Jira –º–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–∑–Ω–µ –ø–æ–ª–µ
                        for field in ['issueId', 'issueKey', 'issue']:
                            if field in attachment_info:
                                value = attachment_info[field]
                                if isinstance(value, dict):
                                    issue_key = value.get('key', '')
                                else:
                                    issue_key = value
                                if issue_key:
                                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á –∑–∞–¥–∞—á—ñ —á–µ—Ä–µ–∑ API: {issue_key}")
                                    break
                        if issue_key:
                            break  # Found the issue key, exit retry loop
                            
                except httpx.ConnectError as conn_error:
                    logger.warning(f"Connection error (attempt {attempt + 1}/{max_retries}): {str(conn_error)}")
                    if attempt < max_retries - 1:
                        retry_delay = min(base_retry_delay * (2 ** attempt), 60)  # Exponential backoff, max 60s
                        logger.info(f"Waiting {retry_delay} seconds before retry...")
                        await asyncio.sleep(retry_delay)
                        continue
                    logger.error(f"Failed to connect to Jira API after {max_retries} attempts: {str(conn_error)}")
                    
                except httpx.HTTPError as http_error:
                    logger.warning(f"HTTP error (attempt {attempt + 1}/{max_retries}): {str(http_error)}")
                    if attempt < max_retries - 1:
                        retry_delay = min(base_retry_delay * (2 ** attempt), 60)
                        logger.info(f"Waiting {retry_delay} seconds before retry...")
                        await asyncio.sleep(retry_delay)
                        continue
                    logger.error(f"HTTP request to Jira API failed after {max_retries} attempts: {str(http_error)}")
                    
                except Exception as e:
                    logger.error(f"Unexpected error accessing Jira API: {str(e)}")
                    break
        
        # –°–ø–æ—Å—ñ–± 2: –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î –∫–ª—é—á–∞, –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –≤ URL
        if not issue_key:
            urls_to_check = []
            
            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ URL –∑ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–ª—ñ–≤
            urls_to_check = set()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ set –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            
            if attachment_url:
                urls_to_check.add(attachment_url)
            if attachment.get('content'):
                urls_to_check.add(attachment.get('content'))
            if attachment.get('url'):
                urls_to_check.add(attachment.get('url'))
            if attachment.get('self'):
                urls_to_check.add(attachment.get('self'))
            
            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ URL, —è–∫—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ issue_key
            if attachment_id:
                urls_to_check.add(f"https://{JIRA_DOMAIN}/secure/attachment/{attachment_id}")
                urls_to_check.add(f"https://{JIRA_DOMAIN}/rest/api/3/attachment/{attachment_id}")
            
            logger.debug(f"URLs to check for issue_key: {list(urls_to_check)}")
                
            for url in urls_to_check:
                # –†—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏ URL
                patterns = [
                    r'/issue/([^/]+)/attachment',              # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
                    r'/([A-Z]+-\d+)/attachments',              # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
                    r'/secure/attachment/[0-9a-f-]+/([A-Z]+-\d+)', # –§–æ—Ä–º–∞—Ç –∑ UUID
                    r'/projects/[^/]+/issues/([^/]+)',         # Project issues —Ñ–æ—Ä–º–∞—Ç
                    r'/([A-Z]+-\d+)/content',                  # –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    r'selectedIssue=([A-Z]+-\d+)',            # –ü–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
                    r'issueKey=([A-Z]+-\d+)'                  # –Ü–Ω—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, url)
                    if match:
                        found_key = match.group(1)
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∫–ª—é—á –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä. SD-40461)
                        if re.match(r'^[A-Z]+-\d+$', found_key):
                            issue_key = found_key
                            logger.info(f"–í–∏—Ç—è–≥–Ω—É—Ç–æ –∫–ª—é—á –∑–∞–¥–∞—á—ñ –∑ URL: {issue_key}")
                            break
                
                if issue_key:
                    break
        
        if not issue_key:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–ª—é—á –∑–∞–¥–∞—á—ñ –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è {attachment_id}")
            return
            
        logger.info(f"–í–∫–ª–∞–¥–µ–Ω–Ω—è {filename} (ID: {attachment_id}) –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        user_data = await find_user_by_jira_issue_key(issue_key)
        if not user_data:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        icon = "üìé" # Default icon
        message = f"üìé <b>–ù–æ–≤–µ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}:</b>\n\nüìé <b>{filename}</b>"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –¥—É–±–ª—ñ–∫–∞—Ç–æ–º
        if is_duplicate_message(issue_key, message):
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á—ñ {issue_key}")
            return
            
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É
        add_message_to_cache(issue_key, message)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫—É –≤–∫–ª–∞–¥–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        # –î–æ–¥–∞—î–º–æ chat_id –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ callback
        attachment['chat_id'] = user_data['telegram_id']
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∫–ª–∞–¥–µ–Ω—å
        logger.info(f"–ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –≤–∫–ª–∞–¥–µ–Ω–Ω—è {filename} –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é attachment_processor")
        try:
            success, errors = await process_attachments_for_issue(
                JIRA_DOMAIN, 
                [attachment], 
                issue_key, 
                send_attachment_to_telegram
            )
            
            if errors > 0:
                logger.warning(f"–î–µ—è–∫—ñ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ ({errors} –ø–æ–º–∏–ª–æ–∫)")
                # Send notification about failed download
                error_message = f"‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}</b>\n\n" \
                              f"–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {filename}\n" \
                              f"–°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –π–æ–≥–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ Jira."
                await send_telegram_message(user_data['telegram_id'], error_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∫–ª–∞–¥–µ–Ω–Ω—è {filename}: {str(e)}", exc_info=True)
            error_message = f"‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}</b>\n\n" \
                          f"–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {filename}\n" \
                          f"–°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –π–æ–≥–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ Jira."
            await send_telegram_message(user_data['telegram_id'], error_message)
            
        # The attachment is handled by send_attachment_to_telegram callback, no need for additional processing
        return
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–Ω—è: {str(e)}", exc_info=True)

# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===

async def send_telegram_message(chat_id: str, text: str, file_data: Optional[tuple] = None) -> bool:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ Telegram.
    
    Args:
        chat_id: ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        file_data: –ö–æ—Ä—Ç–µ–∂ (filename, file_content, mime_type) –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        
    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
    """
    try:
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è HTTP –∫–ª—ñ—î–Ω—Ç–∞
        base_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
        
        # –î–ª—è —Ñ–∞–π–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –æ–±—Ä–æ–±–∫—É
        if file_data:
            filename, file_content, mime_type = file_data
            if not file_content:
                logger.error("–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
                return False
                
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–º timeout
            async with httpx.AsyncClient(timeout=60.0) as client:
                try:
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ñ–∞–π–ª—É
                    method = "sendDocument"  # Default method
                    file_param = "document"  # Default parameter name
                    
                    # Select appropriate method based on MIME type and file size
                    if mime_type.startswith('image/'):
                        if len(file_content) <= 10 * 1024 * 1024:  # Max 10MB for photos
                            method = "sendPhoto"
                            file_param = "photo"
                            
                    elif mime_type.startswith('video/'):
                        if len(file_content) <= 50 * 1024 * 1024:  # Max 50MB for videos
                            method = "sendVideo"
                            file_param = "video"
                            
                    elif mime_type.startswith('audio/'):
                        if len(file_content) <= 50 * 1024 * 1024:  # Max 50MB for audio
                            method = "sendAudio"
                            file_param = "audio"
                    
                    logger.debug(f"Using Telegram API method: {method}")
                    
                    # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    files = {
                        file_param: (filename, BytesIO(file_content), mime_type)
                    }
                    data = {
                        'chat_id': chat_id,
                        'caption': text[:1024] if text else None,  # Limit caption to 1024 chars
                        'parse_mode': 'HTML'
                    }
                    
                    # For large files, set a longer timeout
                    file_size_mb = len(file_content) / (1024 * 1024)
                    timeout = max(30, min(300, int(file_size_mb * 5)))  # 5 seconds per MB, min 30s, max 300s
                    
                    logger.debug(f"Sending file {filename} ({mime_type}) of size {file_size_mb:.2f} MB with {timeout}s timeout")
                    logger.debug(f"Request data: {data}")
                    
                    async with httpx.AsyncClient(timeout=timeout) as client:
                        response = await client.post(f"{base_url}/{method}", data=data, files=files)
                        logger.debug(f"API Response status: {response.status_code}")
                        
                        response.raise_for_status()
                        response_json = response.json()
                        
                        if not response_json.get('ok'):
                            error_msg = response_json.get('description', 'Unknown error')
                            logger.error(f"Telegram API error: {error_msg}")
                            
                            # If file is too large for selected method, try sendDocument
                            if 'file is too big' in error_msg.lower() and method != "sendDocument":
                                logger.info(f"File too big for {method}, falling back to sendDocument")
                                files = {
                                    'document': (filename, BytesIO(file_content), mime_type)
                                }
                                response = await client.post(f"{base_url}/sendDocument", data=data, files=files)
                                response.raise_for_status()
                                response_json = response.json()
                        
                        logger.info(f"File {filename} sent successfully")
                        logger.debug(f"Telegram API response: {json.dumps(response_json, indent=2)}")
                        
                        return True
                        
                except Exception as e:
                    logger.error(f"Error sending file {filename}: {str(e)}", exc_info=True)
                    
                    # Try to get more info about the error
                    error_details = str(e)
                    try:
                        if hasattr(e, 'response') and e.response:
                            error_details = f"{e} - Response: {e.response.text}"
                    except:
                        pass
                    
                    logger.error(f"Error details: {error_details}")
                    
                    # If file is too large, try to send as a link
                    if 'Request entity too large' in str(e) or 'file is too big' in str(e).lower():
                        logger.info("File too large for Telegram, sending as a link")
                        link_text = f"{text}\n\n‚ö†Ô∏è <i>–§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram. " \
                                  f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –π–æ–≥–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ Jira.</i>"
                        return await send_telegram_message(chat_id, link_text)
                    
                    return False
        
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        else:
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ 4096 —Å–∏–º–≤–æ–ª—ñ–≤ (–ª—ñ–º—ñ—Ç Telegram)
            if len(text) > 4096:
                text = text[:4093] + '...'
                
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            async with httpx.AsyncClient() as client:
                response = await client.post(f"{base_url}/sendMessage", json=data)
                response.raise_for_status()
                
                logger.debug(f"Message sent successfully: {text[:100]}...")
                return True
                
    except Exception as e:
        logger.error(f"Error sending message to Telegram: {str(e)}", exc_info=True)
        return False

async def send_telegram_text(chat_id: str, text: str) -> bool:
    """
    –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram.
    
    Args:
        chat_id: ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ HTML)
        
    Returns:
        bool: True, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
    """
    try:
        from config.config import TELEGRAM_BOT_TOKEN
        import requests
        
        tg_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(tg_url, json=data)
        
        if response.status_code == 200:
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            return True
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {str(e)}", exc_info=True)
        return False

def format_comment_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–ª—è Telegram, –æ–±—Ä–æ–±–ª—è—î —Ä–æ–∑–º—ñ—Ç–∫—É Jira.
    –í–∏–¥–∞–ª—è—î –∑–∞–π–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–ª–∞–π–Ω-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    
    Args:
        text: –í–∏—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return text

    import re
    # –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å !image.jpg|width=719,height=1280,alt="image.jpg"!
    text = re.sub(r'!([^|!]+)(\|[^!]+)?!', '', text)
    # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –≤–∫–ª–∞–¥–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, \nüìé –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏: ...)
    text = re.sub(r'\n?üìé –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏:[^\n]*(\n|$)', '', text)
    text = re.sub(r'\n?‚Ä¢ [^\n]+(\n|$)', '', text)
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
    text = re.sub(r'\n\s*\n', '\n', text)
    text = text.strip()
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Jira bold –≤ HTML
    text = re.sub(r'\*([^*]+)\*', r'<b>\1</b>', text)
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Jira italic –≤ HTML
    text = re.sub(r'_([^_]+)_', r'<i>\1</i>', text)
    return text

def is_duplicate_message(issue_key: str, message_text: str, has_attachment: bool = False) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    
    Args:
        issue_key: –ö–ª—é—á –∑–∞–¥–∞—á—ñ
        message_text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        has_attachment: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –≤–∫–ª–∞–¥–µ–Ω–Ω—è
        
    Returns:
        bool: True —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –¥—É–±–ª—ñ–∫–∞—Ç–æ–º
    """
    # –Ø–∫—â–æ —î –≤–∫–ª–∞–¥–µ–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    if has_attachment:
        return False
        
    if issue_key not in RECENT_MESSAGES_CACHE:
        return False
        
    normalized_text = " ".join(message_text.split()).lower()
    
    for cached_msg in RECENT_MESSAGES_CACHE[issue_key]:
        cached_text = " ".join(cached_msg["text"].split()).lower()
        if cached_text == normalized_text or cached_text in normalized_text or normalized_text in cached_text:
            return True
            
    return False

def add_message_to_cache(issue_key: str, message_text: str) -> None:
    """
    –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
    
    Args:
        issue_key: –ö–ª—é—á –∑–∞–¥–∞—á—ñ
        message_text: –¢–µ–∫—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    RECENT_MESSAGES_CACHE[issue_key].append({
        "text": message_text,
        "timestamp": time.time()
    })

def cleanup_message_cache() -> None:
    """–í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É."""
    current_time = time.time()
    
    for issue_key in list(RECENT_MESSAGES_CACHE.keys()):
        # –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        recent_messages = [
            msg for msg in RECENT_MESSAGES_CACHE[issue_key]
            if current_time - msg["timestamp"] < CACHE_TTL
        ]
        
        if recent_messages:
            RECENT_MESSAGES_CACHE[issue_key] = recent_messages
        else:
            del RECENT_MESSAGES_CACHE[issue_key]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –∑–∞—Å—Ç–æ—Å—É–Ω–∫–æ–º
async def setup_webhook_server(app, host: str, port: int, ssl_context: Optional[Any] = None):
    """
    –ù–∞–ª–∞—à—Ç–æ–≤—É—î —ñ –∑–∞–ø—É—Å–∫–∞—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫—ñ–≤.
    
    Args:
        app: –û–±'—î–∫—Ç –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Telegram
        host: –•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        ssl_context: SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–±-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ aiohttp –∑ –±—ñ–ª—å—à–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
    web_app = web.Application(client_max_size=50 * 1024 * 1024)  # 50MB limit
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
    web_app.router.add_post('/rest/webhooks/webhook1', handle_webhook)
    
    # –ù–∞–ª–∞—à—Ç—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –≤–µ–±—Ö—É–∫—É
    async def ping(request):
        return web.json_response({
            "status": "ok",
            "message": "Webhook server is running",
            "max_size": "50MB"
        })
        
    web_app.router.add_get('/rest/webhooks/ping', ping)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∞–π—Ç —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
    # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP, –æ—Å–∫—ñ–ª—å–∫–∏ Nginx –æ–±—Ä–æ–±–ª—è—î SSL
    site = web.TCPSite(runner, host, port)
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä HTTP –Ω–∞ {host}:{port} (SSL –æ–±—Ä–æ–±–ª—è—î Nginx)")
    
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {host}:{port} –∑ –ª—ñ–º—ñ—Ç–æ–º —Ä–æ–∑–º—ñ—Ä—É –∑–∞–ø–∏—Ç—É 50MB")
    
    return runner

async def send_attachment_to_telegram(attachment_data: dict) -> bool:
    """
    Callback function for sending attachments to Telegram.
    Used by the attachment processor.
    
    Args:
        attachment_data: Dict with keys:
            - chat_id: str
            - file_name: str
            - file_bytes: bytes
            - mime_type: str
            - issue_key: str
            
    Returns:
        bool: True if message was sent successfully
    """
    try:
        chat_id = attachment_data.get('chat_id', '')
        filename = attachment_data.get('file_name', '')
        file_bytes = attachment_data.get('file_bytes', b'')
        mime_type = attachment_data.get('mime_type', '')
        issue_key = attachment_data.get('issue_key', '')
        file_size = len(file_bytes) if file_bytes else 0
        
        if not file_bytes:
            logger.error("Empty file content provided to send_attachment_to_telegram")
            return False
        
        # Size limits based on Telegram API constraints    
        size_limit = 50 * 1024 * 1024  # 50MB default
        if mime_type.startswith('image/'):
            size_limit = 10 * 1024 * 1024  # 10MB for photos
            
        # Prepare message text
        icon = "üñºÔ∏è" if mime_type.startswith('image/') else "üìé"
        file_size_mb = file_size / (1024 * 1024)
        file_info = f"{filename} ({file_size_mb:.1f} MB)"
        message = f"{icon} <b>–í–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ {issue_key}:</b>\n\nüìé <b>{file_info}</b>"
        
        # Check file size limit
        if file_size > size_limit:
            warning_msg = (f"{message}\n\n‚ö†Ô∏è <i>–§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram "
                         f"(–æ–±–º–µ–∂–µ–Ω–Ω—è {size_limit/(1024*1024):.0f}MB). "
                         f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –π–æ–≥–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ Jira.</i>")
            return await send_telegram_message(chat_id, warning_msg)
        
        # Send using the existing send_telegram_message function
        return await send_telegram_message(chat_id, message, (filename, file_bytes, mime_type))
    
    except Exception as e:
        logger.error(f"Error in send_attachment_to_telegram: {str(e)}", exc_info=True)
        return False

async def process_attachments(attachments: List[Dict[str, Any]], issue_key: str, chat_id: str) -> None:
    """
    Process and send attachment files from Jira to Telegram.
    This function delegates to the new attachment_processor utilities.
    
    Args:
        attachments: List of attachment objects from Jira
        issue_key: The issue key (e.g., 'SD-40461')
        chat_id: Telegram chat ID to send files to
    """
    try:
        if not attachments:
            logger.info("No attachments to process")
            return
            
        logger.info(f"Processing {len(attachments)} attachments for issue {issue_key}")
        
        # Add chat_id to each attachment for use by the processor
        for att in attachments:
            att['chat_id'] = chat_id
            
        # Use our new utilities to process attachments
        success, errors = await process_attachments_for_issue(
            JIRA_DOMAIN,
            attachments,
            issue_key,
            send_attachment_to_telegram
        )
        
        logger.info(f"Completed processing attachments: {success} successful, {errors} failed")
        
    except Exception as e:
        logger.error(f"Error in process_attachments: {str(e)}", exc_info=True)

def extract_embedded_attachments(text: str) -> List[dict]:
    """
    Extracts information about embedded attachments from Jira comment text.
    Processes syntax like !filename.ext|data-attachment-id=123! and other variations.
    
    Args:
        text: The comment text to analyze
        
    Returns:
        List[dict]: List of dictionaries with attachment info
    """
    import re
    import urllib.parse
    
    if not text:
        return []
        
    attachments = []
    
    # Extract embedded files using regex
    embedded_files = re.finditer(r'!([^|!]+)(?:\|([^!]+))?!', text)
    
    for file_match in embedded_files:
        # Get file name and parameters
        filename = file_match.group(1).split('/')[-1]
        clean_filename = urllib.parse.unquote(filename)
        
        # Initialize attachment info
        attachment_info = {
            'filename': clean_filename,
            'embedded': True
        }
        
        # Extract attachment ID from parameters if any
        attachment_id = None
        if file_match.group(2):  # If there are parameters
            params = file_match.group(2).strip('|').split(',')
            for param in params:
                if '=' in param:
                    key, value = param.split('=', 1)
                    value = value.strip('"')
                    
                    if key == 'data-attachment-id':
                        attachment_id = value
                        attachment_info['id'] = value
                    elif key == 'alt':
                        if value:
                            attachment_info['alt'] = value
        
        # Form the URL for downloading
        if attachment_id:
            jira_url = f"{JIRA_DOMAIN}/secure/attachment/{attachment_id}/{urllib.parse.quote(clean_filename)}"
        else:
            jira_url = f"{JIRA_DOMAIN}/secure/attachment/{urllib.parse.quote(clean_filename)}"
            
        if not jira_url.startswith(('http://', 'https://')):
            jira_url = f"https://{jira_url}"
            
        attachment_info['content'] = jira_url
        
        # Infer MIME type from extension
        attachment_info['mimeType'] = _infer_mime_type(clean_filename)
        
        attachments.append(attachment_info)
    
    return attachments

def _infer_mime_type(filename: str) -> str:
    """Helper function to infer MIME type from filename extension"""
    if filename.lower().endswith(('.jpg', '.jpeg')):
        return 'image/jpeg'
    elif filename.lower().endswith('.png'):
        return 'image/png'
    elif filename.lower().endswith('.gif'):
        return 'image/gif'
    elif filename.lower().endswith('.pdf'):
        return 'application/pdf'
    elif filename.lower().endswith(('.mp4', '.avi', '.mov')):
        return 'video/mp4'
    elif filename.lower().endswith(('.mp3', '.wav')):
        return 'audio/mpeg'
    elif filename.lower().endswith(('.doc', '.docx')):
        return 'application/msword'
    elif filename.lower().endswith('.txt'):
        return 'text/plain'
    else:
        return 'application/octet-stream'
