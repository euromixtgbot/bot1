# filepath: /Users/home/Documents/simple_bot/fixed_issue_formatter.py
"""–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –≤ Jira"""
import logging
from typing import Dict, Any

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

def format_issue_info(issue: Dict[str, Any]) -> Dict[str, str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        issue: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {issue.get('key', '[–Ω–µ—Ç –∫–ª—é—á–∞]')}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    status = issue.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')
    if isinstance(status, dict):
        status = status.get('name', status.get('value', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    if ' (' in status:
        status = status.split(' (')[0].strip()  # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    division = issue.get('division', '–ù–µ–≤—ñ–¥–æ–º–æ')
    if isinstance(division, dict):
        division = division.get('value', division.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    elif isinstance(division, list) and division:
        if isinstance(division[0], dict):
            division = division[0].get('value', division[0].get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
        else:
            division = str(division[0])
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    service = issue.get('service', '–ù–µ–≤—ñ–¥–æ–º–æ')
    if isinstance(service, dict):
        service = service.get('value', service.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    elif isinstance(service, list) and service:
        if isinstance(service[0], dict):
            service = service[0].get('value', service[0].get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
        else:
            service = str(service[0])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞
    reporter_name = issue.get('reporter_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
    if isinstance(reporter_name, dict):
        reporter_name = reporter_name.get('displayName', reporter_name.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    department = issue.get('department', '–ù–µ–≤—ñ–¥–æ–º–æ')
    if isinstance(department, dict):
        department = department.get('value', department.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
    elif isinstance(department, list) and department:
        if isinstance(department[0], dict):
            department = department[0].get('value', department[0].get('name', '–ù–µ–≤—ñ–¥–æ–º–æ'))
        else:
            department = str(department[0])
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    description = issue.get('description', '')
    summary = issue.get('summary', '')
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Jira ADF —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if isinstance(description, dict):
        try:
            if 'content' in description:
                # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ Jira ADF —Ñ–æ—Ä–º–∞—Ç–∞
                text_parts = []
                for content in description.get('content', []):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content_type = content.get('type', '')
                    
                    if content_type == 'paragraph':
                        paragraph_parts = []
                        for part in content.get('content', []):
                            if 'text' in part:
                                paragraph_parts.append(part['text'])
                        if paragraph_parts:
                            text_parts.append(' '.join(paragraph_parts))
                    
                    elif content_type == 'bulletList' or content_type == 'orderedList':
                        for list_item in content.get('content', []):
                            item_parts = []
                            for paragraph in list_item.get('content', []):
                                for text_part in paragraph.get('content', []):
                                    if 'text' in text_part:
                                        item_parts.append(text_part['text'])
                            if item_parts:
                                text_parts.append('‚Ä¢ ' + ' '.join(item_parts))
                
                description = "\n".join(text_parts)
            else:
                description = str(description)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADF –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            description = "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    comments = issue.get('comments', [])
    if isinstance(comments, list):
        comments_list = []
        for comment in comments:
            if isinstance(comment, dict):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                author = comment.get('author', {}).get('displayName', '–ù–µ–≤—ñ–¥–æ–º–æ')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_body = comment.get('body', '')
                if isinstance(comment_body, dict) and 'content' in comment_body:
                    # –ü–∞—Ä—Å–∏–º ADF —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    body_parts = []
                    for content in comment_body.get('content', []):
                        if content.get('type') == 'paragraph':
                            for part in content.get('content', []):
                                if 'text' in part:
                                    body_parts.append(part['text'])
                    comment_text = ' '.join(body_parts)
                else:
                    comment_text = str(comment_body)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                created = comment.get('created', '').split('T')[0] if 'T' in comment.get('created', '') else comment.get('created', '')
                
                comments_list.append(f"{author} [{created}]: {comment_text}")
    else:
        comments_list = []
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    formatted = {
        'key': issue.get('key', '–ù–µ–≤—ñ–¥–æ–º–æ'),
        'summary': summary,
        'status': status,
        'reporter': reporter_name,
        'division': division,
        'department': department,
        'service': service,
        'description': description,
        'comments': '\n'.join(comments_list) if comments_list else '–ù–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
    }
    
    return formatted

def format_issue_text(formatted: Dict[str, str]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    
    Args:
        formatted: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–¥–∞—á–µ
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    """
    text_parts = [
        f"üìã –ó–∞–¥–∞—á–∞: {formatted.get('key', '–ù–µ–≤—ñ–¥–æ–º–æ')}", 
        f"‚úèÔ∏è –¢–µ–º–∞: {formatted.get('summary', '–í—ñ–¥—Å—É—Ç–Ω—è')}", 
        f"üìä –°—Ç–∞—Ç—É—Å: {formatted.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}",
        f"üë§ –ê–≤—Ç–æ—Ä: {formatted.get('reporter', '–ù–µ–≤—ñ–¥–æ–º–æ')}",
        f"üè¢ –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {formatted.get('division', '–ù–µ–≤—ñ–¥–æ–º–æ')}",
        f"üè¨ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {formatted.get('department', '–ù–µ–≤—ñ–¥–æ–º–æ')}",
        f"üõ†Ô∏è –°–µ—Ä–≤—ñ—Å: {formatted.get('service', '–ù–µ–≤—ñ–¥–æ–º–æ')}",
        #f"\nüìù –û–ø–∏—Å: {formatted.get('description', '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
    ]
    
    return '\n'.join(text_parts)
