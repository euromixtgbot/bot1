#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É ConversationHandler —É –∂–∏–≤–æ–º—É –±–æ—Ç—ñ
"""

import asyncio
import logging
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from telegram.ext import Application
from config.config import TELEGRAM_BOT_TOKEN

async def force_reset_conversation_handler(user_id: str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∏–¥–∞—î —Å—Ç–∞–Ω ConversationHandler –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –∂–∏–≤–æ–º—É –±–æ—Ç—ñ"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Application –∑ —Ç–∏–º –∂–µ token, —â–æ —ñ –∂–∏–≤–∏–π –±–æ—Ç
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Application
        await application.initialize()
        
        print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ Application...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ bot_data
        bot_data = application.bot_data
        print(f"üìä Bot data keys: {list(bot_data.keys()) if bot_data else '–ù–µ–º–∞—î'}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ user_data
        user_data = application.user_data.get(int(user_id))
        if user_data:
            print(f"üìã User data –¥–ª—è {user_id}:")
            for key, value in user_data.items():
                print(f"  {key}: {value}")
            
            # –û—á–∏—â–∞—î–º–æ user_data
            user_data.clear()
            print(f"‚úÖ User data –æ—á–∏—â–µ–Ω–æ")
        else:
            print(f"‚ÑπÔ∏è  User data –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ chat_data 
        chat_data = application.chat_data.get(int(user_id))
        if chat_data:
            print(f"üìã Chat data –¥–ª—è {user_id}:")
            for key, value in chat_data.items():
                print(f"  {key}: {value}")
            
            # –û—á–∏—â–∞—î–º–æ chat_data
            chat_data.clear()
            print(f"‚úÖ Chat data –æ—á–∏—â–µ–Ω–æ")
        else:
            print(f"‚ÑπÔ∏è  Chat data –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        # –Ü–º—ñ—Ç—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ConversationHandler
        print(f"üîÑ –ü—Ä–∏–Ω—É–¥–æ–≤–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ –≤—Å—ñ ConversationHandler –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
        
        # –°–∏–º—É–ª—é—î–º–æ END —Å—Ç–∞–Ω –¥–ª—è –≤—Å—ñ—Ö ConversationHandler
        # –¶–µ –º–∞—î –æ—á–∏—Å—Ç–∏—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω ConversationHandler
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ conversation
            all_handlers = []
            if hasattr(application, '_handlers'):
                for group_handlers in application._handlers.values():
                    all_handlers.extend(group_handlers)
            
            conv_handlers = [h for h in all_handlers if hasattr(h, 'states') and hasattr(h, 'conversations')]
            
            for conv_handler in conv_handlers:
                if hasattr(conv_handler, 'conversations'):
                    # –û—Ç—Ä–∏–º—É—î–º–æ conversation key –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    conv_key = (int(user_id), int(user_id))  # (user_id, chat_id)
                    if conv_key in conv_handler.conversations:
                        print(f"üîß –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π ConversationHandler: {conv_handler.name if hasattr(conv_handler, 'name') else 'Unknown'}")
                        print(f"   –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {conv_handler.conversations[conv_key]}")
                        # –í–∏–¥–∞–ª—è—î–º–æ conversation
                        del conv_handler.conversations[conv_key]
                        print(f"‚úÖ ConversationHandler –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                        
        except Exception as conv_error:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ ConversationHandler: {conv_error}")
            
        print(f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await application.shutdown()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python force_reset_conversation.py <user_id>")
        print("–ü—Ä–∏–∫–ª–∞–¥: python force_reset_conversation.py 5667252017")
        sys.exit(1)
    
    user_id = sys.argv[1]
    
    print(f"üöÄ –ü—Ä–∏–Ω—É–¥–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è ConversationHandler –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
    await force_reset_conversation_handler(user_id)
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
