#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É ConversationHandler –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

import asyncio
import logging
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from telegram.ext import Application
from config.config import TELEGRAM_BOT_TOKEN

async def reset_user_conversation_state(user_id: str):
    """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω ConversationHandler –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Application
        await application.initialize()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ChatData –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = application.user_data.get(int(user_id))
        
        if user_data:
            print(f"üìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ bot memory:")
            for key, value in user_data.items():
                print(f"  {key}: {value}")
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ ConversationHandler
            conversation_keys = [
                "full_name", "mobile_number", "division", "department", 
                "service", "description", "attached_photo", "registration",
                "registration_step", "awaiting_new_user_name"
            ]
            
            cleared_keys = []
            for key in conversation_keys:
                if key in user_data:
                    del user_data[key]
                    cleared_keys.append(key)
            
            if cleared_keys:
                print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –∫–ª—é—á—ñ –∑ bot memory: {', '.join(cleared_keys)}")
            else:
                print("‚ÑπÔ∏è  –ö–ª—é—á—ñ ConversationHandler –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ bot memory")
        else:
            print(f"‚ÑπÔ∏è  –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ bot memory")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π —Ñ–∞–π–ª —Å—Ç–∞–Ω—É
        import os
        user_state_file = f"/home/Bot1/user_states/user_{user_id}.json"
        
        if os.path.exists(user_state_file):
            print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π —Ñ–∞–π–ª —Å—Ç–∞–Ω—É: {user_state_file}")
            
            # –ß–∏—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É
            try:
                with open(user_state_file, 'r', encoding='utf-8') as f:
                    import json
                    state_data = json.load(f)
                    print(f"üìã –í–º—ñ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É:")
                    print(f"  registration_step: {state_data.get('state', {}).get('registration_step', 'N/A')}")
                    print(f"  type: {state_data.get('state', {}).get('type', 'N/A')}")
                    print(f"  last_updated: {state_data.get('last_updated', 'N/A')}")
                    
                    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª
                    os.remove(user_state_file)
                    print(f"‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–º —Ñ–∞–π–ª–æ–º: {e}")
        else:
            print(f"‚ÑπÔ∏è  –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π —Ñ–∞–π–ª —Å—Ç–∞–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    finally:
        await application.shutdown()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python reset_user_conversation.py <user_id>")
        print("–ü—Ä–∏–∫–ª–∞–¥: python reset_user_conversation.py 5667252017")
        sys.exit(1)
    
    user_id = sys.argv[1]
    
    print(f"üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É ConversationHandler –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
    await reset_user_conversation_state(user_id)
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
